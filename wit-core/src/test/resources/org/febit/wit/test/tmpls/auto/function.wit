<%
{
    var c;
    var func = function(){
        var a;
        var b;

        {
            var func2 = function(){
                assertTrue(true);
                return c;
            };
            var func4 = (a,b)->{
                assertTrue(true);
                return c;
            };
            var func5 = ()->{
                assertTrue(true);
                return c;
            };
            func2();
            func4();
            func5();
        }
    };
    func();
}
{
    var c;
    function func(){
        var a;
        var b;
        {
            function func2(){
                assertTrue(true);
                return c;
            }
            function func4(a,b){
                assertTrue(true);
                return c;
            }
            func2();
            func4();
        }
    }
    func();
}

{
    var func = function(a, b){
        return b;
    };

    assertEquals(1, func(null, 1));
    assertEquals("b", func(null, "b"));
    assertEquals(null, func());
    assertEquals(null, func(null));
    assertEquals(null, func("a"));

    // test trailing comma
    assertEquals(1, func(null, 1,));
    assertEquals("b", func(null, "b",));
    assertEquals(null, func(null,));
    assertEquals(null, func("a",));
}
{
    // test args with default values

    var func = function(b=1){
        return b;
    };

    assertEquals(1, func(null, 2));
    assertEquals("b", func("b"));
    assertEquals(1, func());
    assertEquals(1, func(null));

    func = (b=1) -> b;
    assertEquals(1, func());

    func = (a, b=1, c) -> [a,b,c];
    assertArrayEquals([null,1,null], func());
    assertArrayEquals([1,2,null], func(1,2));
    assertArrayEquals([1,2,3], func(1,2,3,4));
    assertArrayEquals([1,1,3], func(1,null,3,4));

    func = (a, b=1, c, d=3) -> [a,b,c,d];
    assertArrayEquals([null,1,null,3], func());
    assertArrayEquals([1,1,null,3], func(1));
    assertArrayEquals([1,2,3,4], func(1,2,3,4));

    func = (map={"i":0})-> ++ map.i
    assertEquals(1, func());
    assertEquals(2, func());
    assertEquals(3, func());
    assertEquals(11, func({"i":10}));
    assertEquals(4, func());
    
}
%>