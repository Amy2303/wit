// Copyright (c) 2013, Webit Team. All Rights Reserved.

package webit.script.core;

import java.util.ArrayList;
import java.util.List;
import webit.script.core.ast.*;
import webit.script.core.ast.expressions.*;
import webit.script.core.ast.operators.*;
import webit.script.core.ast.statements.*;
import webit.script.exceptions.ParseException;
import webit.script.util.ALU;
import webit.script.util.ClassNameBand;
import webit.script.util.Stack;
import webit.script.util.StatementUtil;

/* Terminals */
terminal Integer    VAR,
                    IF, ELSE,
                    FOR, /* IN, */
                    THIS, SUPER,
                    SWITCH, CASE, DEFAULT,
                    DO, WHILE,
                    THROW, TRY, CATCH, FINALLY,
                    NEW,
                    INSTANCEOF,
                    FUNCTION,
                    ECHO,
                    STATIC, NATIVE,
                    IMPORT, INCLUDE, NATIVE_IMPORT,
                    BREAK, CONTINUE, RETURN,

                    PLUSPLUS, MINUSMINUS,  // ++ ==
                    PLUS, MINUS, MULT, DIV, MOD,  // + - * /
                    LSHIFT, RSHIFT, URSHIFT,  // << >> >>>
                    LT, GT, LTEQ, GTEQ, EQEQ, NOTEQ,  // < > <= >= == !=
                    AND, XOR, OR, COMP,  // & ^ | ~
                    ANDAND, OROR, NOT,  // && || !
                    QUESTION, QUESTION_COLON,// ?  ?:
                    SELFEQ,  // (+ - * / %)= (<< >> >>>)= (& ^ |)=
                    UMINUS,
                    DOT,  // .
                    COLON,  // :
                    COMMA,  // ,
                    SEMICOLON,  // ;
                    LBRACE, RBRACE, INTERPOLATION_END, // { }
                    LPAREN, RPAREN,  // ( )
                    LBRACK, RBRACK,  // [ ]
                    LDEBUG, RDEBUG, LRDEBUG,  // [? ?] [?]
                    EQGT,  // =>
                    MINUSGT, // ->
                    AT,  // @
                    DOTDOT,  // ..
                    EQ   // =
                    ;


terminal String     IDENTIFIER; // Ident
terminal char[]     TEXT_STATEMENT;
terminal Object     DIRECT_VALUE;
terminal Integer    CONST;



/* non terminal */
non terminal ClassNameBand classPureName, className;
non terminal List<Identifer> identiferList;

/* TemplateAST */
non terminal TemplateAST templateAST;

/* Statement */
non terminal StatementList statementList;

non terminal Statement statement, ifStat;
non terminal IBlock block, caseBlockStat;
non terminal StatementList varPart;
non terminal Expression varAssign;
non terminal ImportPart importPart1, importPart2;
non terminal Object blockPrepare, blockPrepare2;
non terminal SwitchPart switchPart, switchPart0;
non terminal AbstractForInPart forInHead, forInBody, forInPart, lambdaForHead, lambdaForHead2;
non terminal WhilePart whilePart;
non terminal IfPart ifPart;

/* Expression */
non terminal Expression expression, expression_statementable;
non terminal ExpressionList expressionList, expressionList1;
non terminal MapValuePart mapValuePart;
non terminal MapValue mapValue;

non terminal Integer superCount;
non terminal Expression contextValueExpr;
non terminal List<Class> classNameList, classNameList1;

/* function */
non terminal Expression funcExecuteExpr;
non terminal FunctionDeclarePart funcHead, funcStatementHead;

/* Lambda */
non terminal Expression lambdaExpr;
non terminal FunctionDeclarePart lambdaExprHead;

non terminal FunctionDeclarePart lambdaForHead1, lambdaForMapHead1;

/* precedence */
precedence left     SEMICOLON; // ;
precedence left     LDEBUG; // [?
precedence right    SELFEQ, EQ, MINUSGT; // (+ - * / %)=  (<< >> >>>)=  (& ^ |)=  = ->
precedence left     DOTDOT;  // ..
precedence right    QUESTION, QUESTION_COLON; // ?:
precedence left     OROR; // ||
precedence left     ANDAND; // &&
precedence left     XOR; // ^
precedence left     OR; // |
precedence left     AND; // &
precedence left     EQEQ, NOTEQ; // == !=
precedence left     LT, LTEQ, GT, GTEQ; // < <= > >=  //Unsupport: instanceOf
precedence left     LSHIFT, RSHIFT, URSHIFT; // << >> >>>
precedence left     PLUS, MINUS; // + -
precedence left     MULT, DIV, MOD; // * / %
precedence right    PLUSPLUS, MINUSMINUS, UMINUS, NOT, COMP; // ++ -- - ! ~
precedence left     EQGT;  // => 
precedence left     DOT, LBRACK, LPAREN, LBRACE, AT; // . [ ( { @



/* templateAST */

templateAST            ::= statementList:list
                        {: return (%list%).popTemplateAST(varmgr); :}
                        ;

statementList           ::= statement:stat
                        {: return new StatementList().add(%stat%); :}
                        |statementList:list statement:stat
                        {: return (%list%).add(%stat%); :}
                        ;


classPureName       ::= IDENTIFIER:ident
                        {: return new ClassNameBand(%ident%); :}
                        |classPureName:part DOT IDENTIFIER:ident
                        {: return (%part%).append(%ident%); :}
                        ;

className           ::= classPureName:part
                        {: return %part%; :}
                        |className:part LBRACK RBRACK
                        {: return (%part%).plusArrayDepth(); :}
                        ;


identiferList       ::= IDENTIFIER:ident
                        {: List<Identifer> list = new ArrayList<Identifer>(); list.add(new Identifer(%ident%, %ident.line%, %ident.column%)); return list; :}
                        |identiferList:list COMMA IDENTIFIER:ident
                        {: (%list%).add(new Identifer(%ident%, %ident.line%, %ident.column%)); return %list%; :}
                        ;

/* statements  */
statement            ::= expression_statementable:expr SEMICOLON
                        {: return %expr%; :}

                        |SEMICOLON
                        {: return NoneStatement.INSTANCE; :}

                        |LRDEBUG:sym
                        {: return createBreakPointStatement(null, null, %sym.line%, %sym.column%); :}

                        |LDEBUG:sym IDENTIFIER:label COLON RDEBUG
                        {: return createBreakPointStatement(%label%, null, %sym.line%, %sym.column%); :}

                        |expression:expr INTERPOLATION_END
                        {: return createInterpolation(%expr%); :}

                        |block:stat
                        {: return %stat%; :}

                        |ifStat:stat
                        {: return %stat%; :}

                        //switch
                        |switchPart:part
                        {: return (%part%).pop(); :}
                        |IDENTIFIER:label COLON switchPart:part
                        {: return (%part%).pop(getLabelIndex(%label%)); :}
                        
                        //while
                        |whilePart:part
                        {: return (%part%).pop(); :}
                        |IDENTIFIER:label COLON whilePart:part
                        {: return (%part%).pop(getLabelIndex(%label%)); :}

                        //forIn
                        |forInPart:part
                        {: return (%part%).pop(); :}
                        |IDENTIFIER:label COLON forInPart:part
                        {: return (%part%).pop(getLabelIndex(%label%)); :}

                        //RedirectOut
                        |block:stat EQGT:sym expression:expr SEMICOLON
                        {: return new RedirectOut(%stat%, castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}

                        //textStat
                        |TEXT_STATEMENT:sym
                        {: return createTextStatement(%sym%, %sym.line%, %sym.column%); :}

                        //
                        |CONST IDENTIFIER:ident EQ expression:expr SEMICOLON
                        {: assignConst(%ident%, %expr%, %ident.line%, %ident.column%); return NoneStatement.INSTANCE; :}
                        
                        //var
                        |varPart:part SEMICOLON
                        {: return (%part%).popStatementGroup(%part.line%, %part.column%); :}

                        //echoStat
                        |ECHO:sym expression:expr SEMICOLON
                        {: return new Echo(%expr%, %sym.line%, %sym.column%); :}

                        //@import
                        |NATIVE_IMPORT:sym classPureName:nameBand SEMICOLON
                        {: registClass(%nameBand%, %sym.line%, %sym.column%); return NoneStatement.INSTANCE; :}
                        
                        //BREAK
                        |BREAK:sym SEMICOLON
                        {: return new Break(0, %sym.line%, %sym.column%); :}
                        |BREAK:sym IDENTIFIER:label SEMICOLON
                        {: return new Break(getLabelIndex(%label%), %sym.line%, %sym.column%); :}
                        
                        //CONTINUE
                        |CONTINUE:sym SEMICOLON
                        {: return new Continue(0, %sym.line%, %sym.column%); :}
                        |CONTINUE:sym IDENTIFIER:label SEMICOLON
                        {: return new Continue(getLabelIndex(%label%), %sym.line%, %sym.column%); :}
                        
                        //RETURN
                        |RETURN:sym SEMICOLON
                        {: return new Return(null, %sym.line%, %sym.column%); :}
                        |RETURN:sym expression:expr SEMICOLON
                        {: return new Return(%expr%, %sym.line%, %sym.column%); :}

                        //importStat
                        |importPart1:part SEMICOLON
                        {: return (%part%).pop(this.template); :}
                        |importPart2:part SEMICOLON
                        {: return (%part%).pop(this.template); :}

                        //includeStat
                        |INCLUDE:sym expression:expr SEMICOLON
                        {: return new Include(%expr%, null, this.template, %sym.line%, %sym.column%); :}
                        |INCLUDE:sym expression:expr mapValue:paramsExpr SEMICOLON
                        {: return new Include(%expr%, %paramsExpr%, this.template, %sym.line%, %sym.column%); :}
                        |INCLUDE:sym expression:expr LBRACE expression:paramsExpr RBRACE SEMICOLON
                        {: return new Include(%expr%, %paramsExpr%, this.template, %sym.line%, %sym.column%); :}

                        //funcStatement
                        |funcStatementHead:part LBRACE statementList:list RBRACE
                        {: return (%part%).pop(%list%); :}
                        |funcStatementHead:part LBRACE RBRACE
                        {: return (%part%).pop(new StatementList()); :}
                        ;


varAssign       ::= IDENTIFIER:ident EQ:sym expression:expr
                    {: return new Assign(createContextValue(%ident%, %ident.line%, %ident.column%), %expr%, %sym.line%, %sym.column%); :}
                    | IDENTIFIER:ident EQ:sym varAssign:expr
                    {: return new Assign(createContextValue(%ident%, %ident.line%, %ident.column%), %expr%, %sym.line%, %sym.column%); :}
                    ;

varPart         ::= VAR IDENTIFIER:ident
                    {: return new StatementList().add(declearVar(%ident%,%ident.line%,%ident.column%));:}
                    | VAR varAssign:expr
                    {: return new StatementList().add(%expr%); :}
                    | varPart:part COMMA IDENTIFIER:ident
                    {: return (%part%).add(declearVar(%ident%,%ident.line%,%ident.column%)); :}
                    | varPart:part COMMA varAssign:expr
                    {: return (%part%).add(%expr%); :}
                    ;


importPart1     ::= IMPORT:sym expression:expr
                        {: return new ImportPart(%expr%, %sym.line%, %sym.column%); :}
                        |IMPORT:sym expression:expr mapValue:paramsExpr
                        {: return new ImportPart(%expr%, %paramsExpr%, %sym.line%, %sym.column%); :}
                        |IMPORT:sym expression:expr LBRACE expression:paramsExpr RBRACE
                        {: return new ImportPart(%expr%, %paramsExpr%, %sym.line%, %sym.column%); :}
                        ;


importPart2     ::= importPart1:part IDENTIFIER:ident
                        {: return (%part%).append(%ident%, createContextValue(0, %ident%, %ident.line%, %ident.column%)); :}
                        |importPart1:part contextValueExpr:valueExpr EQ IDENTIFIER:ident
                        {: return (%part%).append(%ident%, %valueExpr%); :}
                        |importPart2:part COMMA IDENTIFIER:ident
                        {: return (%part%).append(%ident%, createContextValue(0, %ident%, %ident.line%, %ident.column%)); :}
                        |importPart2:part COMMA contextValueExpr:valueExpr EQ IDENTIFIER:ident
                        {: return (%part%).append(%ident%, %valueExpr%); :}
                        ;


blockPrepare    ::= 
                        {: varmgr.push(); return null; :}
                        ;
blockPrepare2   ::= LBRACE
                        {: varmgr.push(); return null; :}
                        ;


block           ::= blockPrepare2:prepare statementList:list RBRACE
                    {: return (%list%).popIBlock(varmgr.pop(), %prepare.line%, %prepare.column%); :}
                    |blockPrepare2:prepare RBRACE
                    {: return new StatementList().popIBlock(varmgr.pop(), %prepare.line%, %prepare.column%); :}
                    ;


ifPart      ::= IF:sym LPAREN expression:expr RPAREN block:body
                        {: return new IfPart(%expr%, %body%, %sym.line%, %sym.column%); :}
                        ;


ifStat          ::= ifPart:part
                        {: return (%part%).pop(); :}
                        |ifPart:part ELSE block:elseBody
                        {: return (%part%).pop(%elseBody%); :}
                        |ifPart:part ELSE ifStat:elseBody
                        {: return (%part%).pop(%elseBody%); :}
                        ;

forInHead       ::= FOR:sym LPAREN IDENTIFIER:item COLON expression:items RPAREN
                    {: return new ForInPart(%item%, %items%, this.varmgr, %sym.line%, %sym.column%); :}
                    |FOR:sym LPAREN IDENTIFIER:key COMMA IDENTIFIER:value COLON expression:map RPAREN
                    {: return new ForMapPart(%key%, %value%, %map%, this.varmgr, %sym.line%, %sym.column%); :}
                    ;


lambdaForHead1   ::= FOR LPAREN IDENTIFIER:ident MINUSGT:sym
                    {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%).appendArg(%ident%, %ident.line%, %ident.column%); :}
                    ;


lambdaForMapHead1   ::= FOR LPAREN IDENTIFIER:key COMMA IDENTIFIER:value MINUSGT:sym
                    {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%).appendArg(%key%, %key.line%, %key.column%).appendArg(%value%, %value.line%, %value.column%); :}
                    ;


lambdaForHead2  ::= lambdaForHead1:part expression:expr COLON
                    {: return new ForInPart((%part%).getArg(0), (%part%).popFunctionDeclare(%expr%), this.varmgr, %part.line%, %part.column%); :}
                    |lambdaForHead1:part LBRACE statementList:list RBRACE COLON
                    {: return new ForInPart((%part%).getArg(0), (%part%).popFunctionDeclare(%list%), this.varmgr, %part.line%, %part.column%); :}
                    |lambdaForMapHead1:part expression:expr COLON
                    {: return new ForMapPart((%part%).getArg(0), (%part%).getArg(1), (%part%).popFunctionDeclare(%expr%), this.varmgr, %part.line%, %part.column%); :}
                    |lambdaForMapHead1:part LBRACE statementList:list RBRACE COLON
                    {: return new ForMapPart((%part%).getArg(0), (%part%).getArg(1), (%part%).popFunctionDeclare(%list%), this.varmgr, %part.line%, %part.column%); :}
                    ;


lambdaForHead   ::= lambdaForHead2:part expression:items RPAREN
                    {: return (%part%).setCollectionExpr(%items%); :}
                    ;


forInBody       ::= forInHead:part LBRACE statementList:list RBRACE
                    {: return (%part%).setStatementList(%list%); :}
                    |forInHead:part LBRACE RBRACE
                    {: return (%part%).setStatementList(new StatementList()); :}
                    |lambdaForHead:part LBRACE statementList:list RBRACE
                    {: return (%part%).setStatementList(%list%); :}
                    |lambdaForHead:part LBRACE RBRACE
                    {: return (%part%).setStatementList(new StatementList()); :}
                    ;


forInPart       ::= forInBody:part
                    {: return %part%; :}
                    |forInBody:part ELSE block:elseBody
                    {: return (%part%).setElse(%elseBody%); :}
                    ;


whilePart       ::= WHILE:sym LPAREN expression:whileExpr RPAREN block:body
                    {: return new WhilePart(%whileExpr%, %body%, true, %sym.line%, %sym.column%); :}
                    |DO:sym block:body WHILE LPAREN expression:whileExpr RPAREN SEMICOLON
                    {: return new WhilePart(%whileExpr%, %body%, false, %sym.line%, %sym.column%); :}
                    ;


caseBlockStat       ::= blockPrepare:prepare statementList:list
                        {: return (%list%).popIBlock(varmgr.pop(), %prepare.line%, %prepare.column%); :}
                        |blockPrepare:prepare
                        {: return new StatementList().popIBlock(varmgr.pop(), %prepare.line%, %prepare.column%); :}
                        ;


switchPart0         ::= 
                        {: return new SwitchPart(); :}
                        | CASE:sym DIRECT_VALUE:key COLON caseBlockStat:body switchPart0:part
                        {: return (%part%).appendCase(%key%, %body%, %sym.line%, %sym.column%); :}
                        | CASE:sym MINUS:sym DIRECT_VALUE:key COLON caseBlockStat:body switchPart0:part
                        {: return (%part%).appendCase(ALU.negative(%key%), %body%, %sym.line%, %sym.column%); :}
                        | DEFAULT:sym COLON caseBlockStat:body switchPart0:part
                        {: return (%part%).appendCase(null, %body%, %sym.line%, %sym.column%); :}
                        ;


switchPart          ::= SWITCH:sym LPAREN expression:switchExpr RPAREN LBRACE switchPart0:part RBRACE
                        {: return (%part%).setSwitchExpr(%switchExpr%, %sym.line%, %sym.column%); :}
                        |SWITCH:sym LPAREN expression:switchExpr RPAREN LBRACE TEXT_STATEMENT:ignore switchPart0:part RBRACE
                        {: return (%part%).setSwitchExpr(%switchExpr%, %sym.line%, %sym.column%); :}
                        ;



/* Expressions */

expression_statementable ::= 
                    //assignOper = 
                    expression:lexpr EQ:sym expression:expr
                    {: return new Assign(castToResetableValueExpression(%lexpr%), %expr%, %sym.line%, %sym.column%); :}

                    //plusPlusOper ++
                    |PLUSPLUS:sym expression:expr
                    {: return new PlusPlusBefore(castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}
                    |expression:expr PLUSPLUS:sym
                    {: return new PlusPlusAfter(castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}

                    //minusMinusOper --
                    |MINUSMINUS:sym expression:expr
                    {: return new MinusMinusBefore(castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}
                    |expression:expr MINUSMINUS:sym
                    {: return new MinusMinusAfter(castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}

                    //selfOper
                    |expression:lexpr SELFEQ:sym expression:rexpr
                    {: return createSelfOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    
                    //RedirectOutExpression =>
                    |funcExecuteExpr:srcExpr EQGT:sym expression:expr
                    {: return new RedirectOutExpression(%srcExpr%, castToResetableValueExpression(%expr%), %sym.line%, %sym.column%); :}

                    //
                    |funcExecuteExpr:expr    {: return %expr%; :}
                    ;


expression      ::= expression_statementable:expr
                    {: return %expr%; :}

                    |LDEBUG:sym expression:expr RDEBUG
                    {: return createBreakPointExpression(null, %expr%, %sym.line%, %sym.column%); :}

                    |LDEBUG:sym IDENTIFIER:label COLON expression:expr RDEBUG
                    {: return createBreakPointExpression(%label%, %expr%, %sym.line%, %sym.column%); :}

                    //bitNotOper ~
                    |COMP:sym expression:expr
                    {: return StatementUtil.optimize(new BitNot(%expr%, %sym.line%, %sym.column%)); :}
                    
                    //negativeOper  -
                    |MINUS:sym expression:expr
                    {: return StatementUtil.optimize(new Negative(%expr%, %sym.line%, %sym.column%)); :}
                    %prec UMINUS
                    
                    //notOper !
                    |NOT:sym expression:expr
                    {: return StatementUtil.optimize(new Not(%expr%, %sym.line%, %sym.column%)); :}

                    //propertyOper .
                    |expression:expr DOT:sym IDENTIFIER:ident 
                    {: return new PropertyOperator(%expr%, %ident%, %sym.line%, %sym.column%); :}
                    
                    //indexOper []
                    |expression:lexpr LBRACK:sym expression:rexpr RBRACK
                    {: return new IndexOperator(%lexpr%, %rexpr%, %sym.line%, %sym.column%); :}

                    /***********  binarys *************/
                    //-- binary:  *
                    |expression:lexpr MULT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  /
                    |expression:lexpr DIV:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  %
                    |expression:lexpr MOD:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  +
                    |expression:lexpr PLUS:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  -
                    |expression:lexpr MINUS:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  <<
                    |expression:lexpr LSHIFT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  >>
                    |expression:lexpr RSHIFT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  >>>
                    |expression:lexpr URSHIFT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  <
                    |expression:lexpr LT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  <=
                    |expression:lexpr LTEQ:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  >
                    |expression:lexpr GT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  >=
                    |expression:lexpr GTEQ:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  ==
                    |expression:lexpr EQEQ:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  !=
                    |expression:lexpr NOTEQ:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  &
                    |expression:lexpr AND:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  |
                    |expression:lexpr OR:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  ^
                    |expression:lexpr XOR:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  &&
                    |expression:lexpr ANDAND:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  ..
                    |expression:lexpr DOTDOT:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  ||
                    |expression:lexpr OROR:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}
                    //-- binary:  ?:
                    |expression:lexpr QUESTION_COLON:sym expression:rexpr
                    {: return createBinaryOperator(%lexpr%, %sym%, %rexpr%, %sym.line%, %sym.column%); :}

                    //ifOper ? :
                    |expression:ifexpr QUESTION:sym expression:lexpr COLON expression:rexpr
                    {: return new IfOperator(%ifexpr%, %lexpr%, %rexpr%, %sym.line%, %sym.column%); :}

                    //
                    |DIRECT_VALUE:sym
                    {: return new DirectValue(%sym%, %sym.line%, %sym.column%); :}
                    
                    // ()
                    |LPAREN expression:expr RPAREN
                    {: return %expr%; :}

                    //funcDeclareExpr
                    |funcHead:part LBRACE statementList:list RBRACE
                    {: return (%part%).pop(%list%); :}
                    |funcHead:part LBRACE RBRACE
                    {: return (%part%).pop(new StatementList()); :}


                    //arrayValue
                    |LBRACK:sym expressionList:list RBRACK
                    {: return new ArrayValue((%list%).toArray(), %sym.line%, %sym.column%); :}


                    //NativeNewArrayDeclareExpression 
                    |NATIVE:sym LBRACK RBRACK className:nameBand
                    {: return this.createNativeNewArrayDeclareExpression(toClass(%nameBand%, %nameBand.line%, %nameBand.column%), %sym.line%, %sym.column%); :}
                    |NATIVE:sym LBRACK className:nameBand RBRACK
                    {: return this.createNativeNewArrayDeclareExpression(toClass(%nameBand%, %nameBand.line%, %nameBand.column%), %sym.line%, %sym.column%); :}

                    //nativeMethodExpr
                    |NATIVE:sym classPureName:nameBand DOT IDENTIFIER:ident LPAREN classNameList:list RPAREN
                    {: return this.createNativeMethodDeclareExpression(toClass(%nameBand%, %nameBand.line%, %nameBand.column%), %ident%, %list%, %sym.line%, %sym.column%); :}

                    //native static field
                    |NATIVE classPureName:nameBand
                    {: return createNativeStaticValue(%nameBand%, %nameBand.line%, %nameBand.column%); :}

                    //nativeConstructorExpr
                    |NATIVE:sym NEW classPureName:nameBand LPAREN classNameList:list RPAREN
                    {: return this.createNativeConstructorDeclareExpression(toClass(%nameBand%, %nameBand.line%, %nameBand.column%), %list%, %sym.line%, %sym.column%); :}

                    |contextValueExpr:expr
                    {: return %expr%; :}
                    |mapValue:expr
                    {: return %expr%; :}

                    //Lambda
                    |lambdaExpr:expr
                    {: return %expr%; :}
                    ;


// super
superCount          ::= SUPER DOT
                        {: return 1; :}
                        |superCount:count SUPER DOT
                        {: return %count% + 1; :}
                        ;


// ident  super...ident  this.ident

contextValueExpr    ::= IDENTIFIER:ident
                        {: return createContextValue(0, %ident%, %ident.line%, %ident.column%); :}
                        |THIS DOT IDENTIFIER:ident
                        {: return createContextValueAtUpstair(0, %ident%, %ident.line%, %ident.column%); :}
                        |superCount:count IDENTIFIER:ident
                        {: return createContextValue(%count%, %ident%, %ident.line%, %ident.column%); :}
                        |superCount:count THIS DOT IDENTIFIER:ident
                        {: return createContextValueAtUpstair(%count%, %ident%, %ident.line%, %ident.column%); :}

                        |FOR DOT IDENTIFIER:ident
                        {: return createContextValue(0, ("for." + %ident%), %ident.line%, %ident.column%); :}
                        |superCount:count FOR DOT IDENTIFIER:ident
                        {: return createContextValue(%count%, ("for." + %ident%), %ident.line%, %ident.column%); :}
                        ;


expressionList1     ::= expression:expr
                        {: return new ExpressionList().add(%expr%); :}
                        |expressionList1:list COMMA expression:expr
                        {: return (%list%).add(%expr%); :}
                        ;

expressionList      ::=
                        {: return new ExpressionList(); :}
                        |expressionList1:list
                        {: return %list%; :}
                        ;


// map {key:expr, ...}

mapValuePart         ::= DIRECT_VALUE:key COLON expression:expr
                        {: return new MapValuePart().add(%key%, %expr%); :}
                        |MINUS:sym DIRECT_VALUE:key COLON expression:expr
                        {: return new MapValuePart().add(ALU.negative(%key%), %expr%); :}
                        |mapValuePart:part COMMA DIRECT_VALUE:key COLON expression:expr
                        {: return (%part%).add(%key%, %expr%); :}
                        |mapValuePart:part COMMA MINUS:sym DIRECT_VALUE:key COLON expression:expr
                        {: return (%part%).add(ALU.negative(%key%), %expr%); :}
                        ;


mapValue            ::= LBRACE:sym mapValuePart:part RBRACE
                        {: return (%part%).pop(%sym.line%, %sym.column%); :}
                        |LBRACE:sym RBRACE
                        {: return new MapValue(new Object[0], new Expression[0], %sym.line%,%sym.column%); :}
                        ;

/* function  */

funcStatementHead   ::= FUNCTION:sym IDENTIFIER:ident LPAREN RPAREN 
                        {: return new FunctionDeclarePart(%ident%, this.varmgr, %ident.line%, %ident.column%); :}
                        |FUNCTION:sym IDENTIFIER:ident LPAREN identiferList:identList RPAREN 
                        {: return new FunctionDeclarePart(%ident%, this.varmgr, %ident.line%, %ident.column%).appendArgs(%identList%); :}
                        ;


funcHead            ::= FUNCTION:sym
                        {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%); :}
                        |FUNCTION:sym LPAREN RPAREN
                        {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%); :}
                        |FUNCTION:sym LPAREN identiferList:list RPAREN
                        {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%).appendArgs(%list%); :}
                        ;

funcExecuteExpr     ::= expression:funcExpr LPAREN expressionList:list RPAREN
                        {: return new MethodExecute(%funcExpr%, (%list%).toArray(), %funcExpr.line%, %funcExpr.column%); :}
                        |expression:param0 AT contextValueExpr:funcExpr LPAREN expressionList:list RPAREN
                        {: return new MethodExecute(%funcExpr%, (%list%).addFirst(%param0%).toArray(), %funcExpr.line%, %funcExpr.column%); :}
                        ;


classNameList1      ::= className:nameBand
                        {: List<Class> list = new ArrayList<Class>(); list.add(toClass(%nameBand%, %nameBand.line%, %nameBand.column%)); return list; :}
                        |classNameList1:list COMMA className:nameBand
                        {: (%list%).add(toClass(%nameBand%, %nameBand.line%, %nameBand.column%)); return %list%; :}
                        ;

classNameList       ::= 
                        {: return new ArrayList<Class>(); :}
                        |classNameList1:list
                        {: return %list%; :}
                        ;


/* lambda */
lambdaExprHead           ::= IDENTIFIER:ident MINUSGT:sym
                            {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%).appendArg(%ident%, %ident.line%, %ident.column%); :}
                            |LPAREN IDENTIFIER:ident COMMA identiferList:list RPAREN MINUSGT:sym
                            {: return new FunctionDeclarePart(this.varmgr, %sym.line%, %sym.column%).appendArg(%ident%, %ident.line%, %ident.column%).appendArgs(%list%); :}
                            ;


lambdaExpr               ::= lambdaExprHead:part expression:expr
                            {: return (%part%).pop(%expr%); :}
                            |lambdaExprHead:part LBRACE statementList:list RBRACE
                            {: return (%part%).pop(%list%); :}
                            ;
