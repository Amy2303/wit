
//----------------------------------------------------
// The following code was generated by CUP-WIT v1.0
//----------------------------------------------------

package webit.script.core;

public interface Tokens {

    /* terminals */
    int EOF = 0;
    int ERROR = 1;
    int VAR = 2;
    int IF = 3;
    int ELSE = 4;
    int FOR = 5;
    int THIS = 6;
    int SUPER = 7;
    int SWITCH = 8;
    int CASE = 9;
    int DEFAULT = 10;
    int DO = 11;
    int WHILE = 12;
    int THROW = 13;
    int TRY = 14;
    int CATCH = 15;
    int FINALLY = 16;
    int NEW = 17;
    int INSTANCEOF = 18;
    int FUNCTION = 19;
    int ECHO = 20;
    int STATIC = 21;
    int NATIVE = 22;
    int IMPORT = 23;
    int INCLUDE = 24;
    int NATIVE_IMPORT = 25;
    int BREAK = 26;
    int CONTINUE = 27;
    int RETURN = 28;
    int PLUSPLUS = 29;
    int MINUSMINUS = 30;
    int PLUS = 31;
    int MINUS = 32;
    int MULT = 33;
    int DIV = 34;
    int MOD = 35;
    int LSHIFT = 36;
    int RSHIFT = 37;
    int URSHIFT = 38;
    int LT = 39;
    int GT = 40;
    int LTEQ = 41;
    int GTEQ = 42;
    int EQEQ = 43;
    int NOTEQ = 44;
    int AND = 45;
    int XOR = 46;
    int OR = 47;
    int COMP = 48;
    int ANDAND = 49;
    int OROR = 50;
    int NOT = 51;
    int QUESTION = 52;
    int QUESTION_COLON = 53;
    int SELFEQ = 54;
    int UMINUS = 55;
    int DOT = 56;
    int COLON = 57;
    int COMMA = 58;
    int SEMICOLON = 59;
    int LBRACE = 60;
    int RBRACE = 61;
    int INTERPOLATION_END = 62;
    int LPAREN = 63;
    int RPAREN = 64;
    int LBRACK = 65;
    int RBRACK = 66;
    int LDEBUG = 67;
    int RDEBUG = 68;
    int LRDEBUG = 69;
    int EQGT = 70;
    int MINUSGT = 71;
    int AT = 72;
    int DOTDOT = 73;
    int EQ = 74;
    int IDENTIFIER = 75;
    int TEXT_STATEMENT = 76;
    int DIRECT_VALUE = 77;
    int CONST = 78;

    /* non terminals */
    //int classPureName = 0;
    //int className = 1;
    //int templateAST = 2;
    //int statement = 3;
    //int ifStat = 4;
    //int varPart = 5;
    //int block = 6;
    //int caseBlockStat = 7;
    //int varAssign = 8;
    //int importPart1 = 9;
    //int importPart2 = 10;
    //int switchPart = 11;
    //int switchPart0 = 12;
    //int forInHead = 13;
    //int forInPart = 14;
    //int lambdaForHead = 15;
    //int lambdaForHead2 = 16;
    //int whilePart = 17;
    //int expression = 18;
    //int expression_statementable = 19;
    //int expressionList = 20;
    //int mapValuePart = 21;
    //int mapValue = 22;
    //int superCount = 23;
    //int contextValueExpr = 24;
    //int classNameList = 25;
    //int classNameList1 = 26;
    //int funcExecuteExpr = 27;
    //int funcHead = 28;
    //int funcStatementHead = 29;
    //int lambdaExpr = 30;
    //int lambdaExprHead = 31;
    //int lambdaForHead1 = 32;
    //int lambdaForMapHead1 = 33;
    //int statement$$lst$ = 34;
    //int $START = 35;
    //int varPart$$lst$COMMA = 36;
    //int IDENTIFIER$$opt = 37;
    //int expression$$opt = 38;
    //int $IPNT_0 = 39;
    //int $IPNT_0$$opt = 40;
    //int statement$$lst$$$opt = 41;
    //int $IPNT_1 = 42;
    //int $IPNT_2 = 43;
    //int $IPNT_3 = 44;
    //int $IPNT_3$$opt = 45;
    //int $IPNT_4 = 46;
    //int $IPNT_5 = 47;
    //int $IPNT_5$$opt = 48;
    //int $NT49 = 49;
    //int TEXT_STATEMENT$$opt = 50;
    //int IDENTIFIER$$lst$COMMA = 51;
    //int IDENTIFIER$$lst$COMMA$$opt = 52;
}

