/* The following code was generated by JFlex 1.6.0 */

package webit.script.core;

import webit.script.exceptions.ParseException;
import webit.script.util.FastCharBuffer;
import webit.script.util.RepeatChars;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 8192;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYSTATEMENT = 2;
  public static final int STRING = 4;
  public static final int CHARLITERAL = 6;
  public static final int END_OF_FILE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\112\1\113\1\1\16\7\4\0\1\3\1\75"+
    "\1\26\1\61\1\34\1\32\1\101\1\27\1\65\1\66\1\5\1\103"+
    "\1\73\1\25\1\23\1\4\1\10\1\12\1\105\1\17\1\106\1\20"+
    "\1\111\1\107\1\110\1\14\1\100\1\72\1\31\1\74\1\33\1\77"+
    "\1\64\1\16\1\11\1\16\1\22\1\24\1\21\5\6\1\13\13\6"+
    "\1\15\2\6\1\70\1\30\1\71\1\104\1\6\1\0\1\41\1\36"+
    "\1\43\1\52\1\40\1\54\1\6\1\57\1\50\1\6\1\42\1\53"+
    "\1\63\1\46\1\45\1\56\1\6\1\37\1\44\1\47\1\51\1\60"+
    "\1\55\1\15\1\62\1\6\1\35\1\102\1\67\1\76\6\7\1\114"+
    "\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7"+
    "\7\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6"+
    "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"+
    "\17\7\2\0\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7"+
    "\3\0\2\6\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6"+
    "\1\7\4\6\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\112\1\112"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\32\6\26\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\16\0\46\6\12\0\66\6\11\0\1\6\17\0\1\7\27\6\11\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0"+
    "\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6"+
    "\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6"+
    "\64\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6"+
    "\24\0\57\6\1\7\14\0\2\7\1\0\31\6\10\0\120\6\2\7"+
    "\45\0\11\6\2\0\147\6\2\0\4\6\1\0\2\6\16\0\12\6"+
    "\120\0\10\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0"+
    "\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0"+
    "\22\7\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6"+
    "\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7"+
    "\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7"+
    "\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\43\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0"+
    "\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u012e\6\2\0\76\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7"+
    "\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6"+
    "\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6"+
    "\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6"+
    "\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6"+
    "\12\0\32\6\306\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6"+
    "\1\0\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6"+
    "\203\0\66\6\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7"+
    "\65\6\17\7\37\0\12\7\20\0\3\7\55\6\13\7\2\0\1\7"+
    "\u0f42\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u45c7\0\2\6"+
    "\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7"+
    "\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"+
    "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6"+
    "\2\0\62\7\u2800\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\1\2\2\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\14\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\1\1\42\2\2\2\43\1\2"+
    "\3\0\1\44\1\45\1\3\1\0\1\46\1\47\1\50"+
    "\1\0\1\50\1\51\1\52\1\0\2\50\1\53\1\54"+
    "\2\0\1\52\1\55\1\56\1\57\1\0\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\17\6\1\66\2\6\1\67"+
    "\6\6\1\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\2\104\2\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\12\103\1\0\1\117\1\120\2\121\2\50\1\52"+
    "\2\0\1\122\1\123\1\124\12\6\1\125\3\6\1\126"+
    "\7\6\1\127\3\6\1\130\1\0\1\105\1\0\1\131"+
    "\1\0\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\120\1\142\1\143\1\121\2\50\1\0\1\144"+
    "\2\6\1\145\1\146\1\147\7\6\1\150\1\151\1\6"+
    "\1\152\10\6\1\0\1\120\1\121\2\50\1\0\1\153"+
    "\1\6\1\154\1\155\2\6\1\156\2\6\1\157\4\6"+
    "\1\160\2\6\1\161\1\0\1\120\1\121\2\50\1\0"+
    "\1\162\1\6\1\163\1\164\1\165\2\6\1\166\3\6"+
    "\1\0\1\120\1\121\2\50\1\0\1\6\1\167\1\6"+
    "\1\170\1\171\1\6\1\172\1\120\1\121\2\50\1\0"+
    "\1\173\1\6\1\20\1\120\1\121\2\50\1\0\1\6"+
    "\1\120\1\121\2\50\1\0\1\174\1\120\1\0\2\50"+
    "\1\175\1\120\1\0\2\50\1\120\1\0\2\50\1\120"+
    "\1\0\2\50\1\120\1\0\2\50\1\120\1\0\2\50"+
    "\1\120\1\0\1\50\1\52\1\120\1\0\1\52\1\120"+
    "\1\52\1\120\1\52\1\120\1\52\1\120\1\52\14\120"+
    "\40\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u0181\0\u02b5\0\u0181\0\u0302\0\u034f\0\u039c\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u0181\0\u0181\0\u051d\0\u056a\0\u05b7"+
    "\0\u0181\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2"+
    "\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u0181\0\u09a0\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u09ed\0\u0a3a"+
    "\0\u0181\0\u0a87\0\u0181\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08"+
    "\0\u0181\0\u0c55\0\u0ca2\0\u0cef\0\u0181\0\u0d3c\0\u01ce\0\u021b"+
    "\0\u0268\0\u0181\0\u0181\0\u0d89\0\u0dd6\0\u0181\0\u0181\0\u0e23"+
    "\0\u0e70\0\u0ebd\0\u0181\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u0181"+
    "\0\u0181\0\u103e\0\u108b\0\u10d8\0\u0181\0\u0181\0\u0181\0\u1125"+
    "\0\u1172\0\u0181\0\u0181\0\u0181\0\u11bf\0\u0181\0\u120c\0\u1259"+
    "\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1"+
    "\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u039c\0\u168f\0\u16dc"+
    "\0\u039c\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u1944\0\u0181\0\u1991\0\u19de"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9"+
    "\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u0181\0\u1d7a\0\u1dc7\0\u1e14"+
    "\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u0181\0\u1fe2\0\u0181"+
    "\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a"+
    "\0\u2297\0\u22e4\0\u039c\0\u2331\0\u237e\0\u23cb\0\u039c\0\u2418"+
    "\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u039c\0\u2633"+
    "\0\u2680\0\u26cd\0\u039c\0\u271a\0\u0181\0\u1a78\0\u0181\0\u2767"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u27b4\0\u0181\0\u0181\0\u2801\0\u284e\0\u289b\0\u28e8\0\u0181"+
    "\0\u2935\0\u2982\0\u039c\0\u039c\0\u039c\0\u29cf\0\u2a1c\0\u2a69"+
    "\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u039c\0\u039c\0\u2bea\0\u039c"+
    "\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u039c\0\u306d"+
    "\0\u039c\0\u039c\0\u30ba\0\u3107\0\u039c\0\u3154\0\u31a1\0\u039c"+
    "\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u039c\0\u3322\0\u336f\0\u039c"+
    "\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u039c\0\u358a"+
    "\0\u039c\0\u039c\0\u039c\0\u35d7\0\u3624\0\u039c\0\u3671\0\u36be"+
    "\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926"+
    "\0\u039c\0\u3973\0\u039c\0\u039c\0\u39c0\0\u0181\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u039c\0\u3b8e\0\u039c\0\u3bdb\0\u3c28"+
    "\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u3edd\0\u039c\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u0181\0\u405e"+
    "\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6"+
    "\0\u4313\0\u4360\0\u43ad\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e"+
    "\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af\0\u46fc\0\u46fc\0\u4749"+
    "\0\u4796\0\u47e3\0\u4830\0\u487d\0\u48ca\0\u4917\0\u4964\0\u49b1"+
    "\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19"+
    "\0\u4c66\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81"+
    "\0\u4ece\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f\0\u509c\0\u50e9"+
    "\0\u5136\0\u5183\0\u51d0\0\u521d\0\u526a\0\u52b7\0\u5304\0\u5351"+
    "\0\u539e\0\u53eb\0\u5438\0\u5485\0\u54d2\0\u551f\0\u556c\0\u55b9"+
    "\0\u5606\0\u5653\0\u56a0\0\u56ed\0\u573a\0\u5787";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\6\1\7\1\10\2\6\1\11\60\6\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\12\1\20\1\17\1\21"+
    "\1\17\1\21\2\17\2\21\2\17\1\22\1\17\1\23"+
    "\1\24\1\25\1\12\1\26\1\27\1\30\1\17\1\31"+
    "\1\32\1\33\1\34\2\17\1\35\1\36\1\17\1\37"+
    "\1\40\1\41\1\17\1\42\1\17\1\43\1\44\2\17"+
    "\1\45\1\46\2\17\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\5\21\1\12\1\14\1\12"+
    "\26\70\1\71\1\70\1\72\64\70\1\73\1\74\1\75"+
    "\24\73\1\12\1\76\64\73\115\12\145\0\1\77\1\100"+
    "\2\0\1\101\112\0\1\102\117\0\1\103\61\0\1\14"+
    "\116\0\1\104\1\105\66\0\1\106\114\0\1\107\26\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\23\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\10\0\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\0\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\11\0\1\111\1\0\1\123\11\0"+
    "\1\121\1\113\1\120\30\0\1\116\2\117\1\114\1\117"+
    "\13\0\1\21\1\0\1\21\1\113\1\21\2\0\2\21"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\113\1\120\30\0\5\21\13\0\1\124\1\0\1\124"+
    "\1\0\1\124\2\0\2\124\2\0\1\125\61\0\5\124"+
    "\30\0\1\126\46\0\1\127\10\0\1\130\40\0\1\131"+
    "\42\0\1\132\53\0\1\133\40\0\1\134\53\0\1\135"+
    "\40\0\1\136\26\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\1\17\1\137\21\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\2\17\1\140\20\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\5\17\1\141\7\17\1\142\5\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\3\17\1\143\3\17\1\144\13\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\11\17\1\145\1\17"+
    "\1\146\3\17\1\147\3\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\2\17\1\150\1\151\7\17\1\152\7\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\1\17\1\153\17\17\1\154"+
    "\1\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\10\17\1\155"+
    "\5\17\1\156\4\17\1\0\1\17\1\157\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\2\17\1\160\4\17\1\161\13\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\3\17\1\162\3\17\1\163\2\17"+
    "\1\164\1\165\7\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\21\17\1\166\1\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\3\17\1\167\17\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\50\0\1\170\77\0\1\171\40\0\1\172\114\0"+
    "\1\173\120\0\1\174\110\0\1\175\4\0\1\176\107\0"+
    "\1\177\5\0\1\200\106\0\1\201\6\0\1\202\105\0"+
    "\1\203\20\0\26\70\1\0\1\70\1\0\64\70\1\204"+
    "\1\205\1\206\5\204\1\207\1\204\1\207\4\204\1\207"+
    "\1\210\5\204\1\211\1\212\1\213\5\204\1\214\1\215"+
    "\6\204\1\216\1\217\4\204\1\220\30\204\1\207\2\210"+
    "\1\204\1\210\32\0\1\221\67\0\1\75\112\0\1\204"+
    "\2\0\5\204\1\222\1\204\1\222\4\204\1\222\1\223"+
    "\5\204\1\224\1\225\1\226\5\204\1\227\1\230\6\204"+
    "\1\231\1\232\4\204\1\233\30\204\1\222\2\223\1\204"+
    "\1\223\3\0\1\104\2\0\112\104\5\105\1\234\107\105"+
    "\10\0\1\110\1\0\1\112\1\235\1\114\2\0\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\1\116\2\117\1\114\1\117"+
    "\13\0\1\236\1\0\1\236\112\0\1\117\1\0\1\117"+
    "\1\235\1\114\2\0\2\117\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\117"+
    "\1\114\1\117\13\0\1\114\1\0\1\114\1\0\1\114"+
    "\2\0\2\114\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\0\1\120\30\0\5\114\13\0\1\237"+
    "\2\240\1\0\1\240\1\0\5\240\1\0\1\240\11\0"+
    "\1\240\1\0\2\240\1\0\1\240\6\0\1\240\1\0"+
    "\1\240\30\0\5\240\13\0\1\241\1\0\1\241\1\235"+
    "\1\114\2\0\2\241\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\241\1\114"+
    "\1\241\13\0\1\242\1\0\1\242\1\235\1\114\2\0"+
    "\2\242\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\242\1\114\1\242\13\0"+
    "\1\124\1\0\1\124\1\0\1\124\2\0\2\124\64\0"+
    "\5\124\13\0\1\243\1\0\1\243\1\0\1\243\2\0"+
    "\2\243\4\0\1\244\55\0\1\244\1\0\5\243\13\0"+
    "\1\124\1\0\1\124\1\0\1\124\2\0\2\124\1\120"+
    "\1\121\1\0\1\123\13\0\1\123\11\0\1\121\1\0"+
    "\1\120\30\0\5\124\15\0\1\245\176\0\1\246\53\0"+
    "\1\247\40\0\1\250\26\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\2\17\1\251\20\17\1\0\2\17\21\0"+
    "\5\17\2\0\1\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\11\17\1\252\11\17\1\0\2\17\21\0"+
    "\5\17\2\0\1\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\21\17\1\253\1\17\1\0\2\17\21\0"+
    "\5\17\2\0\1\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\6\17\1\254\14\17\1\0\2\17\21\0"+
    "\5\17\2\0\1\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\6\17\1\255\2\17\1\256\11\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\10\17\1\257\12\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\3\17\1\260\17\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\20\17\1\261\2\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\12\17\1\262\10\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\17\17\1\263\3\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\11\17\1\264\11\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\15\17\1\265\5\17\1\0"+
    "\2\17\21\0\5\17\2\0\1\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\13\17\1\266\7\17\1\0"+
    "\1\267\1\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\1\17\1\270\10\17"+
    "\1\271\10\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\5\17"+
    "\1\272\1\273\14\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\20\17\1\274\2\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\16\17\1\275\4\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\15\17\1\276\5\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\1\17\1\277\21\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\10\17\1\300\12\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\10\17\1\301\12\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\12\17\1\302\10\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\1\17\1\303\21\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\63\0\1\304\33\0\1\206\122\0\1\210\1\0"+
    "\1\210\4\0\2\210\64\0\3\210\1\0\1\210\13\0"+
    "\1\305\1\0\1\305\4\0\2\305\64\0\3\305\1\0"+
    "\1\305\13\0\1\306\1\0\1\306\4\0\2\306\6\0"+
    "\1\307\55\0\3\306\1\0\1\306\13\0\1\310\1\0"+
    "\1\310\4\0\2\310\6\0\1\307\55\0\3\310\1\0"+
    "\1\310\32\0\1\311\114\0\1\312\114\0\1\313\114\0"+
    "\1\314\114\0\1\315\114\0\1\316\114\0\1\317\114\0"+
    "\1\320\65\0\4\105\1\14\1\234\107\105\10\0\1\321"+
    "\1\0\1\321\1\322\37\0\1\322\51\0\1\237\2\240"+
    "\1\323\1\240\1\0\5\240\1\0\1\240\11\0\1\240"+
    "\1\0\2\240\1\0\1\240\6\0\1\240\1\323\1\240"+
    "\30\0\5\240\13\0\3\324\1\323\1\324\1\0\5\324"+
    "\1\0\1\324\11\0\1\324\1\0\2\324\1\0\1\324"+
    "\6\0\1\324\1\323\1\324\30\0\5\324\13\0\1\325"+
    "\1\0\1\325\1\235\1\114\2\0\2\325\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\325\1\114\1\325\13\0\1\326\1\0\1\326"+
    "\1\235\1\114\2\0\2\326\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\326"+
    "\1\114\1\326\13\0\1\243\1\0\1\243\1\0\1\243"+
    "\2\0\2\243\1\120\1\121\27\0\1\121\1\0\1\120"+
    "\30\0\5\243\13\0\1\243\1\0\1\243\1\0\1\243"+
    "\2\0\2\243\64\0\5\243\111\0\1\327\102\0\1\330"+
    "\26\0\15\17\1\0\1\17\7\0\1\17\1\0\3\17"+
    "\1\331\17\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\13\17"+
    "\1\332\7\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\7\17"+
    "\1\333\13\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\2\17"+
    "\1\334\20\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\2\17"+
    "\1\335\20\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\5\17"+
    "\1\336\15\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\6\17"+
    "\1\337\2\17\1\340\11\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\11\17\1\341\11\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\2\17\1\342\20\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\11\17\1\343\11\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\12\17\1\344\10\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\345\5\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\2\17\1\346\20\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\7\17\1\347\13\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\6\17\1\350\14\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\351\5\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\11\17\1\352\11\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\7\17\1\353\13\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\3\17\1\354\17\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\6\17\1\355\14\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\3\17\1\356\17\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\5\17\1\357\15\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\360\5\17\1\0\2\17\21\0\5\17"+
    "\2\0\1\17\56\0\1\361\65\0\1\307\75\0\1\362"+
    "\1\0\1\362\1\322\37\0\1\322\51\0\3\363\1\323"+
    "\1\363\1\0\5\363\1\0\1\363\11\0\1\363\1\0"+
    "\2\363\1\0\1\363\6\0\1\363\1\323\1\363\30\0"+
    "\5\363\13\0\1\364\1\0\1\364\1\235\1\114\2\0"+
    "\2\364\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\364\1\114\1\364\13\0"+
    "\1\365\1\0\1\365\1\235\1\114\2\0\2\365\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\365\1\114\1\365\112\0\1\366\13\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\4\17\1\367"+
    "\16\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\1\17\1\370"+
    "\21\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\21\17\1\371"+
    "\1\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\11\17\1\372"+
    "\11\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\12\17\1\373"+
    "\10\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\12\17\1\374"+
    "\10\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\1\17\1\375"+
    "\21\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\5\17\1\376"+
    "\15\17\1\0\2\17\21\0\5\17\2\0\1\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\22\17\1\377"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\17\17\1\u0100\3\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\13\17\1\u0101\7\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\3\17\1\u0102\17\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\1\17\1\u0103\21\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\13\17\1\u0104\7\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\2\17\1\u0105\20\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\15\17\1\u0106\5\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\11\17\1\u0107\11\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\2\17\1\u0108\20\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\45\0\1\u0109"+
    "\57\0\1\u010a\1\0\1\u010a\1\322\37\0\1\322\51\0"+
    "\3\u010b\1\323\1\u010b\1\0\5\u010b\1\0\1\u010b\11\0"+
    "\1\u010b\1\0\2\u010b\1\0\1\u010b\6\0\1\u010b\1\323"+
    "\1\u010b\30\0\5\u010b\13\0\1\u010c\1\0\1\u010c\1\235"+
    "\1\114\2\0\2\u010c\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u010c\1\114"+
    "\1\u010c\13\0\1\u010d\1\0\1\u010d\1\235\1\114\2\0"+
    "\2\u010d\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u010d\1\114\1\u010d\111\0"+
    "\1\u010e\14\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\10\17\1\u010f\12\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\10\17\1\u0110\12\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\5\17\1\u0111\15\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\21\17\1\u0112\1\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\2\17\1\u0113\20\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\14\17\1\u0114\6\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\10\17\1\u0115\12\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\11\17\1\u0116\11\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\15\17\1\u0117\5\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\15\17\1\u0118\5\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\12\17\1\u0119\10\17\1\0\2\17\21\0\5\17\2\0"+
    "\1\17\37\0\1\u011a\65\0\1\u011b\1\0\1\u011b\1\322"+
    "\37\0\1\322\51\0\3\u011c\1\323\1\u011c\1\0\5\u011c"+
    "\1\0\1\u011c\11\0\1\u011c\1\0\2\u011c\1\0\1\u011c"+
    "\6\0\1\u011c\1\323\1\u011c\30\0\5\u011c\13\0\1\u011d"+
    "\1\0\1\u011d\1\235\1\114\2\0\2\u011d\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u011d\1\114\1\u011d\13\0\1\u011e\1\0\1\u011e"+
    "\1\235\1\114\2\0\2\u011e\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u011e"+
    "\1\114\1\u011e\113\0\1\u011f\12\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\13\17\1\u0120\7\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\2\17\1\u0121\20\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\5\17\1\u0122\15\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\11\17\1\u0123\11\17\1\0\2\17"+
    "\21\0\5\17\2\0\1\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\23\17\1\0\1\u0124\1\17\21\0"+
    "\5\17\2\0\1\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\7\17\1\u0125\13\17\1\0\2\17\21\0"+
    "\5\17\2\0\1\17\47\0\1\u0126\55\0\1\u0127\1\0"+
    "\1\u0127\1\322\37\0\1\322\51\0\3\u0128\1\323\1\u0128"+
    "\1\0\5\u0128\1\0\1\u0128\11\0\1\u0128\1\0\2\u0128"+
    "\1\0\1\u0128\6\0\1\u0128\1\323\1\u0128\30\0\5\u0128"+
    "\13\0\1\u0129\1\0\1\u0129\1\235\1\114\2\0\2\u0129"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u0129\1\114\1\u0129\13\0\1\u012a"+
    "\1\0\1\u012a\1\235\1\114\2\0\2\u012a\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u012a\1\114\1\u012a\22\0\1\u012b\103\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\2\17\1\u012c\20\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\2\17\1\u012d\20\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\10\17\1\u012e\12\17"+
    "\1\0\2\17\21\0\5\17\2\0\1\17\10\0\1\u012f"+
    "\1\0\1\u012f\1\322\37\0\1\322\51\0\3\u0130\1\323"+
    "\1\u0130\1\0\5\u0130\1\0\1\u0130\11\0\1\u0130\1\0"+
    "\2\u0130\1\0\1\u0130\6\0\1\u0130\1\323\1\u0130\30\0"+
    "\5\u0130\13\0\1\u0131\1\0\1\u0131\1\235\1\114\2\0"+
    "\2\u0131\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0131\1\114\1\u0131\13\0"+
    "\1\u0132\1\0\1\u0132\1\235\1\114\2\0\2\u0132\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u0132\1\114\1\u0132\114\0\1\u0133\11\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\7\17\1\u0134"+
    "\13\17\1\0\2\17\21\0\5\17\2\0\1\17\10\0"+
    "\1\u0135\1\0\1\u0135\1\322\37\0\1\322\51\0\3\u0136"+
    "\1\323\1\u0136\1\0\5\u0136\1\0\1\u0136\11\0\1\u0136"+
    "\1\0\2\u0136\1\0\1\u0136\6\0\1\u0136\1\323\1\u0136"+
    "\30\0\5\u0136\13\0\1\u0137\1\0\1\u0137\1\235\1\114"+
    "\2\0\2\u0137\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u0137\1\114\1\u0137"+
    "\13\0\1\u0138\1\0\1\u0138\1\235\1\114\2\0\2\u0138"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u0138\1\114\1\u0138\111\0\1\u0139"+
    "\14\0\15\17\1\0\1\17\7\0\1\17\1\0\16\17"+
    "\1\u013a\4\17\1\0\2\17\21\0\5\17\2\0\1\17"+
    "\10\0\1\u013b\1\0\1\u013b\1\322\37\0\1\322\51\0"+
    "\3\u013c\1\323\1\u013c\1\0\5\u013c\1\0\1\u013c\11\0"+
    "\1\u013c\1\0\2\u013c\1\0\1\u013c\6\0\1\u013c\1\323"+
    "\1\u013c\30\0\5\u013c\13\0\1\u013d\1\0\1\u013d\1\235"+
    "\1\114\2\0\2\u013d\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u013d\1\114"+
    "\1\u013d\13\0\1\u013e\1\0\1\u013e\1\235\1\114\2\0"+
    "\2\u013e\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u013e\1\114\1\u013e\113\0"+
    "\1\u013f\14\0\1\u0140\1\0\1\u0140\1\322\37\0\1\322"+
    "\51\0\3\u0141\1\323\1\u0141\1\0\5\u0141\1\0\1\u0141"+
    "\11\0\1\u0141\1\0\2\u0141\1\0\1\u0141\6\0\1\u0141"+
    "\1\323\1\u0141\30\0\5\u0141\13\0\1\u0142\1\0\1\u0142"+
    "\1\235\1\114\2\0\2\u0142\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u0142"+
    "\1\114\1\u0142\13\0\1\u0143\1\0\1\u0143\1\235\1\114"+
    "\2\0\2\u0143\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u0143\1\114\1\u0143"+
    "\13\0\1\u0144\1\0\1\u0144\1\322\37\0\1\322\51\0"+
    "\3\u0145\1\323\1\u0145\1\0\5\u0145\1\0\1\u0145\11\0"+
    "\1\u0145\1\0\2\u0145\1\0\1\u0145\6\0\1\u0145\1\323"+
    "\1\u0145\30\0\5\u0145\13\0\1\u0146\1\0\1\u0146\1\235"+
    "\1\114\2\0\2\u0146\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u0146\1\114"+
    "\1\u0146\13\0\1\u0147\1\0\1\u0147\1\235\1\114\2\0"+
    "\2\u0147\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0147\1\114\1\u0147\13\0"+
    "\1\u0148\1\0\1\u0148\1\322\37\0\1\322\51\0\3\u0149"+
    "\1\323\1\u0149\1\0\5\u0149\1\0\1\u0149\11\0\1\u0149"+
    "\1\0\2\u0149\1\0\1\u0149\6\0\1\u0149\1\323\1\u0149"+
    "\30\0\5\u0149\13\0\1\u014a\1\0\1\u014a\1\235\1\114"+
    "\2\0\2\u014a\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u014a\1\114\1\u014a"+
    "\13\0\1\u014b\1\0\1\u014b\1\235\1\114\2\0\2\u014b"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u014b\1\114\1\u014b\13\0\1\u014c"+
    "\1\0\1\u014c\1\322\37\0\1\322\51\0\3\u014d\1\323"+
    "\1\u014d\1\0\5\u014d\1\0\1\u014d\11\0\1\u014d\1\0"+
    "\2\u014d\1\0\1\u014d\6\0\1\u014d\1\323\1\u014d\30\0"+
    "\5\u014d\13\0\1\u014e\1\0\1\u014e\1\235\1\114\2\0"+
    "\2\u014e\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u014e\1\114\1\u014e\13\0"+
    "\1\u014f\1\0\1\u014f\1\235\1\114\2\0\2\u014f\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u014f\1\114\1\u014f\13\0\1\u0150\1\0"+
    "\1\u0150\1\322\37\0\1\322\51\0\3\u0151\1\323\1\u0151"+
    "\1\0\5\u0151\1\0\1\u0151\11\0\1\u0151\1\0\2\u0151"+
    "\1\0\1\u0151\6\0\1\u0151\1\323\1\u0151\30\0\5\u0151"+
    "\13\0\1\u0152\1\0\1\u0152\1\235\1\114\2\0\2\u0152"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u0152\1\114\1\u0152\13\0\1\u0153"+
    "\1\0\1\u0153\1\235\1\114\2\0\2\u0153\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u0153\1\114\1\u0153\13\0\1\u0154\1\0\1\u0154"+
    "\1\322\37\0\1\322\51\0\3\u0155\1\323\1\u0155\1\0"+
    "\5\u0155\1\0\1\u0155\11\0\1\u0155\1\0\2\u0155\1\0"+
    "\1\u0155\6\0\1\u0155\1\323\1\u0155\30\0\5\u0155\13\0"+
    "\1\u0156\1\0\1\u0156\1\235\1\114\2\0\2\u0156\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u0156\1\114\1\u0156\13\0\1\u0157\1\0"+
    "\1\u0157\1\235\1\114\2\0\2\u0157\1\120\1\121\1\122"+
    "\1\123\13\0\1\123\11\0\1\121\1\235\1\120\30\0"+
    "\3\u0157\1\114\1\u0157\13\0\1\u0158\1\0\1\u0158\1\322"+
    "\37\0\1\322\51\0\3\u0159\1\323\1\u0159\1\0\5\u0159"+
    "\1\0\1\u0159\11\0\1\u0159\1\0\2\u0159\1\0\1\u0159"+
    "\6\0\1\u0159\1\323\1\u0159\30\0\5\u0159\13\0\1\u015a"+
    "\1\0\1\u015a\1\235\1\114\2\0\2\u015a\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u015a\1\114\1\u015a\13\0\1\u015b\1\0\1\u015b"+
    "\1\322\37\0\1\322\54\0\1\323\37\0\1\323\51\0"+
    "\1\u015c\1\0\1\u015c\1\235\1\114\2\0\2\u015c\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u015c\1\114\1\u015c\13\0\1\u015d\1\0"+
    "\1\u015d\1\322\37\0\1\322\51\0\1\u015e\1\0\1\u015e"+
    "\1\235\1\114\2\0\2\u015e\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u015e"+
    "\1\114\1\u015e\13\0\1\u015f\1\0\1\u015f\1\322\37\0"+
    "\1\322\51\0\1\u0160\1\0\1\u0160\1\235\1\114\2\0"+
    "\2\u0160\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0160\1\114\1\u0160\13\0"+
    "\1\u0161\1\0\1\u0161\1\322\37\0\1\322\51\0\1\u0162"+
    "\1\0\1\u0162\1\235\1\114\2\0\2\u0162\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u0162\1\114\1\u0162\13\0\1\u0163\1\0\1\u0163"+
    "\1\322\37\0\1\322\51\0\1\114\1\0\1\114\1\235"+
    "\1\114\2\0\2\114\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\5\114\13\0"+
    "\1\u0164\1\0\1\u0164\1\322\37\0\1\322\51\0\1\u0165"+
    "\1\0\1\u0165\1\322\37\0\1\322\51\0\1\u0166\1\0"+
    "\1\u0166\1\322\37\0\1\322\51\0\1\u0167\1\0\1\u0167"+
    "\1\322\37\0\1\322\51\0\1\u0168\1\0\1\u0168\1\322"+
    "\37\0\1\322\51\0\1\u0169\1\0\1\u0169\1\322\37\0"+
    "\1\322\51\0\1\u016a\1\0\1\u016a\1\322\37\0\1\322"+
    "\51\0\1\u016b\1\0\1\u016b\1\322\37\0\1\322\51\0"+
    "\1\u016c\1\0\1\u016c\1\322\37\0\1\322\51\0\1\u016d"+
    "\1\0\1\u016d\1\322\37\0\1\322\51\0\1\u016e\1\0"+
    "\1\u016e\1\322\37\0\1\322\51\0\1\u016f\1\0\1\u016f"+
    "\1\322\37\0\1\322\51\0\1\u0170\1\0\1\u0170\1\322"+
    "\37\0\1\322\51\0\1\u0171\1\0\1\u0171\1\322\37\0"+
    "\1\322\51\0\1\u0172\1\0\1\u0172\1\322\37\0\1\322"+
    "\51\0\1\u0173\1\0\1\u0173\1\322\37\0\1\322\51\0"+
    "\1\u0174\1\0\1\u0174\1\322\37\0\1\322\51\0\1\u0175"+
    "\1\0\1\u0175\1\322\37\0\1\322\51\0\1\u0176\1\0"+
    "\1\u0176\1\322\37\0\1\322\51\0\1\u0177\1\0\1\u0177"+
    "\1\322\37\0\1\322\51\0\1\u0178\1\0\1\u0178\1\322"+
    "\37\0\1\322\51\0\1\u0179\1\0\1\u0179\1\322\37\0"+
    "\1\322\51\0\1\u017a\1\0\1\u017a\1\322\37\0\1\322"+
    "\51\0\1\u017b\1\0\1\u017b\1\322\37\0\1\322\51\0"+
    "\1\u017c\1\0\1\u017c\1\322\37\0\1\322\51\0\1\u017d"+
    "\1\0\1\u017d\1\322\37\0\1\322\51\0\1\u017e\1\0"+
    "\1\u017e\1\322\37\0\1\322\51\0\1\u017f\1\0\1\u017f"+
    "\1\322\37\0\1\322\51\0\1\u0180\1\0\1\u0180\1\322"+
    "\37\0\1\322\51\0\1\u0181\1\0\1\u0181\1\322\37\0"+
    "\1\322\51\0\1\u0182\1\0\1\u0182\1\322\37\0\1\322"+
    "\51\0\1\u0183\1\0\1\u0183\1\322\37\0\1\322\51\0"+
    "\1\u0184\1\0\1\u0184\1\322\37\0\1\322\51\0\1\u0185"+
    "\1\0\1\u0185\1\322\37\0\1\322\51\0\1\u0186\1\0"+
    "\1\u0186\1\322\37\0\1\322\51\0\1\u0187\1\0\1\u0187"+
    "\1\322\37\0\1\322\51\0\1\u0188\1\0\1\u0188\1\322"+
    "\37\0\1\322\51\0\1\u0189\1\0\1\u0189\1\322\37\0"+
    "\1\322\51\0\1\u018a\1\0\1\u018a\1\322\37\0\1\322"+
    "\51\0\1\u018b\1\0\1\u018b\1\322\37\0\1\322\51\0"+
    "\1\u018c\1\0\1\u018c\1\322\37\0\1\322\51\0\1\u018d"+
    "\1\0\1\u018d\1\322\37\0\1\322\51\0\1\u018e\1\0"+
    "\1\u018e\1\322\37\0\1\322\54\0\1\322\37\0\1\322"+
    "\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\1\11\7\1\2\11"+
    "\3\1\1\11\14\1\1\11\1\1\7\11\2\1\1\11"+
    "\1\1\1\11\5\1\1\11\3\1\1\11\1\1\3\0"+
    "\2\11\1\1\1\0\2\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\2\11\2\0\1\1\3\11\1\0"+
    "\1\1\3\11\1\1\1\11\31\1\1\0\14\11\1\1"+
    "\1\11\2\1\11\11\12\1\1\0\1\11\6\1\2\0"+
    "\1\11\1\1\1\11\33\1\1\0\1\11\1\0\1\11"+
    "\1\0\10\11\1\1\2\11\3\1\1\0\1\11\30\1"+
    "\1\0\4\1\1\0\22\1\1\0\4\1\1\0\13\1"+
    "\1\0\4\1\1\0\6\1\1\11\4\1\1\0\7\1"+
    "\1\0\5\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\25\1\40\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //================ >> user code

    private static final int INTERPOLATION_START_LEN = 2;
    private static final int TEXT_BLOCK_END_LEN = 2;


    private boolean interpolationFlag = false;
    private boolean leftInterpolationFlag = true;

    private boolean trimCodeBlockBlankLine = false;
    private FastCharBuffer stringBuffer = new FastCharBuffer(256);
    private int stringLine = 0;
    private int stringColumn = 0;
    
    public void setTrimCodeBlockBlankLine(boolean flag){
        trimCodeBlockBlankLine = flag;
    }
    
    public int getColumn(){
        return yycolumn+1;
    }
    
    public int getLine(){
        return yyline+1;
    }

    public char yychar(){
        return (char)yychar;
    }

    private char[] popAsCharArray() {
        char[] chars = stringBuffer.toArray();
        stringBuffer.clear();
        return chars;
    }

    private char[] popAsCharArraySkipIfLeftNewLine() {
        char[] chars = stringBuffer.toArraySkipIfLeftNewLine();
        stringBuffer.clear();
        return chars;
    }

    private String popAsString() {
        return new String(popAsCharArray());
    }

    private void resetString() {
        stringBuffer.clear();
        stringLine = yyline;
        stringColumn = yycolumn;
    }

    private void appendToString(char c) {
        stringBuffer.append(c);
    }

    private void appendToString(char c, int repeat) {
        if(repeat > 12){
            stringBuffer.append(new RepeatChars(c, repeat));
        }else if(repeat >2){
            final char[] chars = new char[repeat];
            while (repeat != 0) {
                chars[--repeat] = c;
            }
            stringBuffer.append(chars);
        }else if (repeat == 2) {
            stringBuffer.append(c).append(c);
        }else if (repeat == 1) {
            stringBuffer.append(c);
        }
    }

    private void appendToString(String string) {
        stringBuffer.append(string);
    }

    private void pullToString() {
        stringBuffer.append(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    private void pullToString(int startOffset, int endOffset) {
        stringBuffer.append(zzBuffer, zzStartRead + startOffset, zzMarkedPos - zzStartRead + endOffset);
    }

    private Symbol symbol(int sym) {
        return new Symbol(sym, yyline + 1, yycolumn + 1, sym);
    }

    private Symbol symbol(int sym, Object val) {
        return new Symbol(sym, yyline + 1, yycolumn + 1, val);
    }
    
    private Symbol symbol(int sym, int line, int column, Object val) {
        return new Symbol(sym, line, column, val);
    }

    private Symbol popTextStatementSymbol(boolean interpolationFlag){
        this.interpolationFlag = interpolationFlag;
        yybegin(YYSTATEMENT);
        final char[] chars;
        if(trimCodeBlockBlankLine){
            if(!interpolationFlag){
                stringBuffer.trimRightBlankToNewLine();
            }
            chars = this.leftInterpolationFlag
                    ? popAsCharArray()
                    : popAsCharArraySkipIfLeftNewLine();
        }else{
            chars = popAsCharArray();
        }
        return symbol(Tokens.TEXT_STATEMENT, stringLine, stringColumn, chars);
    }

    public final String yytext(int startOffset, int endOffset) {
        return new String(zzBuffer, zzStartRead + startOffset, zzMarkedPos - zzStartRead + endOffset);
    }

    public final String yytext(int endOffset) {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead + endOffset);
    }

    public final char yyTextChar(int startOffset) {
        return zzBuffer[zzStartRead + startOffset];
    }

    public final char yyTextChar() {
        return zzBuffer[zzStartRead];
    }

    private long yyLong(int startOffset, int endOffset, int radix){
        return parseLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset, radix);
    }

    private int yyInt(int startOffset, int endOffset, int radix){
        return (int) parseLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset, radix);
    }

    private long yyBinLong(int startOffset, int endOffset){
        return parseBinLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset);
    }

    private int yyBinInteger(int startOffset, int endOffset){
        return (int) parseBinLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset);
    }

    private long parseBinLong(char[] buffer, int start, int end) {
        long result = 0;
        while (start < end) {
            result <<= 1;
            if(buffer[start++] == '1'){
                ++ result;
            }
        }
        return result;
    }

    /**
     * assumes correct representation of a long value for specified radix in
     * scanner buffer from
     * <code>start</code> to
     * <code>end</code>
     */
    private long parseLong(char[] buffer, int start, int end, int radix) {
        long result = 0;
        while (start < end) {
            result = result * radix + Character.digit(buffer[start++], radix);
        }
        return result;
    }

    //================ << user code


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2660) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { pullToString();
          }
        case 126: break;
        case 2: 
          { throw new ParseException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn, getLine(), getColumn());
          }
        case 127: break;
        case 3: 
          { /* ignore */
          }
        case 128: break;
        case 4: 
          { return symbol(Tokens.DIV);
          }
        case 129: break;
        case 5: 
          { return symbol(Tokens.MULT);
          }
        case 130: break;
        case 6: 
          { return symbol(Tokens.IDENTIFIER, yytext().intern());
          }
        case 131: break;
        case 7: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(0, 0, 10));
          }
        case 132: break;
        case 8: 
          { return symbol(Tokens.DOT);
          }
        case 133: break;
        case 9: 
          { return symbol(Tokens.MINUS);
          }
        case 134: break;
        case 10: 
          { yybegin(STRING); resetString();
          }
        case 135: break;
        case 11: 
          { yybegin(CHARLITERAL);
          }
        case 136: break;
        case 12: 
          { return symbol(Tokens.LT);
          }
        case 137: break;
        case 13: 
          { return symbol(Tokens.MOD);
          }
        case 138: break;
        case 14: 
          { return symbol(Tokens.GT);
          }
        case 139: break;
        case 15: 
          { return symbol(Tokens.LBRACE);
          }
        case 140: break;
        case 16: 
          { return symbol(Tokens.FUNCTION);
          }
        case 141: break;
        case 17: 
          { return symbol(Tokens.AT);
          }
        case 142: break;
        case 18: 
          { return symbol(Tokens.LPAREN);
          }
        case 143: break;
        case 19: 
          { return symbol(Tokens.RPAREN);
          }
        case 144: break;
        case 20: 
          { if(!interpolationFlag){return symbol(Tokens.RBRACE);}else{yybegin(YYINITIAL); leftInterpolationFlag = true;return symbol(Tokens.INTERPOLATION_END);}
          }
        case 145: break;
        case 21: 
          { return symbol(Tokens.LBRACK);
          }
        case 146: break;
        case 22: 
          { return symbol(Tokens.RBRACK);
          }
        case 147: break;
        case 23: 
          { return symbol(Tokens.SEMICOLON);
          }
        case 148: break;
        case 24: 
          { return symbol(Tokens.COMMA);
          }
        case 149: break;
        case 25: 
          { return symbol(Tokens.EQ);
          }
        case 150: break;
        case 26: 
          { return symbol(Tokens.NOT);
          }
        case 151: break;
        case 27: 
          { return symbol(Tokens.COMP);
          }
        case 152: break;
        case 28: 
          { return symbol(Tokens.QUESTION);
          }
        case 153: break;
        case 29: 
          { return symbol(Tokens.COLON);
          }
        case 154: break;
        case 30: 
          { return symbol(Tokens.AND);
          }
        case 155: break;
        case 31: 
          { return symbol(Tokens.OR);
          }
        case 156: break;
        case 32: 
          { return symbol(Tokens.PLUS);
          }
        case 157: break;
        case 33: 
          { return symbol(Tokens.XOR);
          }
        case 158: break;
        case 34: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, stringLine, stringColumn, popAsString());
          }
        case 159: break;
        case 35: 
          { throw new ParseException("Unterminated character literal at end of line", getLine(), getColumn());
          }
        case 160: break;
        case 36: 
          { int length = yylength() - TEXT_BLOCK_END_LEN; appendToString('\\',length/2); if((length & 1) == 0){return popTextStatementSymbol(false);} else {appendToString("<%");}
          }
        case 161: break;
        case 37: 
          { int length = yylength() - INTERPOLATION_START_LEN; appendToString('\\',length/2); if((length & 1) == 0){return popTextStatementSymbol(true);} else {appendToString("${");}
          }
        case 162: break;
        case 38: 
          { return symbol(Tokens.SELFEQ, Operators.DIVEQ);
          }
        case 163: break;
        case 39: 
          { return symbol(Tokens.SELFEQ, Operators.MULTEQ);
          }
        case 164: break;
        case 40: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(1, 0, 8));
          }
        case 165: break;
        case 41: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(0, -1, 10));
          }
        case 166: break;
        case 42: 
          { return symbol(Tokens.DIRECT_VALUE, new Double(yytext()));
          }
        case 167: break;
        case 43: 
          { return symbol(Tokens.DIRECT_VALUE, new Float(yytext(0, -1)));
          }
        case 168: break;
        case 44: 
          { return symbol(Tokens.DIRECT_VALUE, new Double(yytext(0, -1)));
          }
        case 169: break;
        case 45: 
          { return symbol(Tokens.DOTDOT);
          }
        case 170: break;
        case 46: 
          { return symbol(Tokens.MINUSMINUS);
          }
        case 171: break;
        case 47: 
          { return symbol(Tokens.SELFEQ, Operators.MINUSEQ);
          }
        case 172: break;
        case 48: 
          { return symbol(Tokens.LSHIFT);
          }
        case 173: break;
        case 49: 
          { return symbol(Tokens.LTEQ);
          }
        case 174: break;
        case 50: 
          { leftInterpolationFlag = false; yybegin(YYINITIAL);
          }
        case 175: break;
        case 51: 
          { return symbol(Tokens.SELFEQ, Operators.MODEQ);
          }
        case 176: break;
        case 52: 
          { return symbol(Tokens.RSHIFT);
          }
        case 177: break;
        case 53: 
          { return symbol(Tokens.GTEQ);
          }
        case 178: break;
        case 54: 
          { return symbol(Tokens.IF);
          }
        case 179: break;
        case 55: 
          { return symbol(Tokens.DO);
          }
        case 180: break;
        case 56: 
          { return symbol(Tokens.EQGT);
          }
        case 181: break;
        case 57: 
          { return symbol(Tokens.EQEQ);
          }
        case 182: break;
        case 58: 
          { return symbol(Tokens.NOTEQ);
          }
        case 183: break;
        case 59: 
          { return symbol(Tokens.QUESTION_COLON);
          }
        case 184: break;
        case 60: 
          { return symbol(Tokens.SELFEQ, Operators.ANDEQ);
          }
        case 185: break;
        case 61: 
          { return symbol(Tokens.ANDAND);
          }
        case 186: break;
        case 62: 
          { return symbol(Tokens.SELFEQ, Operators.OREQ);
          }
        case 187: break;
        case 63: 
          { return symbol(Tokens.OROR);
          }
        case 188: break;
        case 64: 
          { return symbol(Tokens.SELFEQ, Operators.PLUSEQ);
          }
        case 189: break;
        case 65: 
          { return symbol(Tokens.PLUSPLUS);
          }
        case 190: break;
        case 66: 
          { return symbol(Tokens.SELFEQ, Operators.XOREQ);
          }
        case 191: break;
        case 67: 
          { throw new ParseException("Illegal escape sequence \""+yytext()+"\"", getLine(), getColumn());
          }
        case 192: break;
        case 68: 
          { /* escape new line */
          }
        case 193: break;
        case 69: 
          { char val = (char) Integer.parseInt(yytext(1,0),8); appendToString(val);
          }
        case 194: break;
        case 70: 
          { appendToString( '\"' );
          }
        case 195: break;
        case 71: 
          { appendToString( '\'' );
          }
        case 196: break;
        case 72: 
          { appendToString( '\\' );
          }
        case 197: break;
        case 73: 
          { appendToString( '\b' );
          }
        case 198: break;
        case 74: 
          { appendToString( '\r' );
          }
        case 199: break;
        case 75: 
          { appendToString( '\n' );
          }
        case 200: break;
        case 76: 
          { appendToString( '\t' );
          }
        case 201: break;
        case 77: 
          { appendToString( '\f' );
          }
        case 202: break;
        case 78: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, yyTextChar());
          }
        case 203: break;
        case 79: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(1, -1, 8));
          }
        case 204: break;
        case 80: 
          { return symbol(Tokens.DIRECT_VALUE, yyBinInteger(2, 0));
          }
        case 205: break;
        case 81: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(2, 0, 16));
          }
        case 206: break;
        case 82: 
          { return symbol(Tokens.SELFEQ, Operators.LSHIFTEQ);
          }
        case 207: break;
        case 83: 
          { return symbol(Tokens.URSHIFT);
          }
        case 208: break;
        case 84: 
          { return symbol(Tokens.SELFEQ, Operators.RSHIFTEQ);
          }
        case 209: break;
        case 85: 
          { return symbol(Tokens.NEW);
          }
        case 210: break;
        case 86: 
          { return symbol(Tokens.TRY);
          }
        case 211: break;
        case 87: 
          { return symbol(Tokens.FOR);
          }
        case 212: break;
        case 88: 
          { return symbol(Tokens.VAR);
          }
        case 213: break;
        case 89: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, (char) yyInt(1, -1 ,8));
          }
        case 214: break;
        case 90: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\"');
          }
        case 215: break;
        case 91: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\'');
          }
        case 216: break;
        case 92: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\\');
          }
        case 217: break;
        case 93: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\b');
          }
        case 218: break;
        case 94: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\r');
          }
        case 219: break;
        case 95: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\n');
          }
        case 220: break;
        case 96: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\t');
          }
        case 221: break;
        case 97: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\f');
          }
        case 222: break;
        case 98: 
          { return symbol(Tokens.DIRECT_VALUE, yyBinLong(2, -1));
          }
        case 223: break;
        case 99: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(2, -1, 16));
          }
        case 224: break;
        case 100: 
          { return symbol(Tokens.SELFEQ, Operators.URSHIFTEQ);
          }
        case 225: break;
        case 101: 
          { return symbol(Tokens.ECHO);
          }
        case 226: break;
        case 102: 
          { return symbol(Tokens.ELSE);
          }
        case 227: break;
        case 103: 
          { return symbol(Tokens.CASE);
          }
        case 228: break;
        case 104: 
          { return symbol(Tokens.DIRECT_VALUE, null);
          }
        case 229: break;
        case 105: 
          { return symbol(Tokens.DIRECT_VALUE, Boolean.TRUE);
          }
        case 230: break;
        case 106: 
          { return symbol(Tokens.THIS);
          }
        case 231: break;
        case 107: 
          { return symbol(Tokens.BREAK);
          }
        case 232: break;
        case 108: 
          { return symbol(Tokens.CATCH);
          }
        case 233: break;
        case 109: 
          { return symbol(Tokens.CONST);
          }
        case 234: break;
        case 110: 
          { return symbol(Tokens.SUPER);
          }
        case 235: break;
        case 111: 
          { return symbol(Tokens.THROW);
          }
        case 236: break;
        case 112: 
          { return symbol(Tokens.DIRECT_VALUE, Boolean.FALSE);
          }
        case 237: break;
        case 113: 
          { return symbol(Tokens.WHILE);
          }
        case 238: break;
        case 114: 
          { return symbol(Tokens.RETURN);
          }
        case 239: break;
        case 115: 
          { return symbol(Tokens.STATIC);
          }
        case 240: break;
        case 116: 
          { return symbol(Tokens.SWITCH);
          }
        case 241: break;
        case 117: 
          { return symbol(Tokens.NATIVE);
          }
        case 242: break;
        case 118: 
          { return symbol(Tokens.IMPORT);
          }
        case 243: break;
        case 119: 
          { return symbol(Tokens.INCLUDE);
          }
        case 244: break;
        case 120: 
          { return symbol(Tokens.DEFAULT);
          }
        case 245: break;
        case 121: 
          { return symbol(Tokens.FINALLY);
          }
        case 246: break;
        case 122: 
          { return symbol(Tokens.NATIVE_IMPORT);
          }
        case 247: break;
        case 123: 
          { return symbol(Tokens.CONTINUE);
          }
        case 248: break;
        case 124: 
          { return symbol(Tokens.INSTANCEOF);
          }
        case 249: break;
        case 125: 
          { return symbol(Tokens.DIRECT_VALUE, Integer.MIN_VALUE);
          }
        case 250: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              yybegin(END_OF_FILE); return symbol(Tokens.TEXT_STATEMENT,  stringLine,stringColumn, popAsCharArray());
            }
            case 399: break;
            case END_OF_FILE: {
              return symbol(Tokens.EOF);
            }
            case 400: break;
            default:
              {
                return symbol(Tokens.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
