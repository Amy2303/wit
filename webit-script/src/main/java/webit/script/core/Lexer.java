/* The following code was generated by JFlex 1.4.3 on 14-1-26 上午9:38 */

package webit.script.core;

import webit.script.exceptions.ParseException;
import webit.script.util.FastCharBuffer;
import webit.script.util.RepeatChars;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-1-26 上午9:38 from the specification file
 * <tt>Lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 8192;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int YYSTATEMENT = 2;
  public static final int CHARLITERAL = 6;
  public static final int END_OF_FILE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\75"+
    "\1\26\1\61\1\34\1\32\1\101\1\27\1\65\1\66\1\5\1\103"+
    "\1\73\1\25\1\23\1\4\1\10\1\12\1\105\1\17\1\106\1\20"+
    "\1\111\1\107\1\110\1\14\1\100\1\72\1\31\1\74\1\33\1\77"+
    "\1\64\1\16\1\11\1\16\1\22\1\24\1\21\5\6\1\13\13\6"+
    "\1\15\2\6\1\70\1\30\1\71\1\104\1\6\1\0\1\41\1\36"+
    "\1\43\1\52\1\40\1\54\1\6\1\57\1\50\1\6\1\42\1\53"+
    "\1\63\1\46\1\45\1\56\1\6\1\37\1\44\1\47\1\51\1\60"+
    "\1\55\1\15\1\62\1\6\1\35\1\102\1\67\1\76\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6"+
    "\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6"+
    "\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0"+
    "\15\6\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6"+
    "\11\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0"+
    "\2\7\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6"+
    "\2\0\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\1\2\2\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\14\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\1\1\42\2\2\2\43\1\2"+
    "\3\0\1\44\1\45\1\3\1\0\1\46\1\47\1\50"+
    "\1\0\1\50\1\51\1\52\1\0\2\50\1\53\1\54"+
    "\2\0\1\52\1\55\1\56\1\57\1\0\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\17\6\1\66\2\6\1\67"+
    "\6\6\1\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\2\104\2\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\12\103\1\0\1\117\1\120\2\121\2\50\1\52"+
    "\2\0\1\122\1\123\1\124\12\6\1\125\3\6\1\126"+
    "\7\6\1\127\3\6\1\130\1\0\1\105\1\0\1\131"+
    "\1\0\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\120\1\142\1\143\1\121\2\50\1\0\1\144"+
    "\2\6\1\145\1\146\1\147\6\6\1\150\1\151\1\6"+
    "\1\152\10\6\1\0\1\120\1\121\2\50\1\0\1\153"+
    "\1\6\1\154\2\6\1\155\2\6\1\156\4\6\1\157"+
    "\2\6\1\160\1\0\1\120\1\121\2\50\1\0\1\161"+
    "\1\6\1\162\1\163\1\164\2\6\1\165\3\6\1\0"+
    "\1\120\1\121\2\50\1\0\1\6\1\166\1\6\1\167"+
    "\1\170\1\6\1\171\1\120\1\121\2\50\1\0\1\172"+
    "\1\6\1\20\1\120\1\121\2\50\1\0\1\6\1\120"+
    "\1\121\2\50\1\0\1\173\1\120\1\0\2\50\1\174"+
    "\1\120\1\0\2\50\1\120\1\0\2\50\1\120\1\0"+
    "\2\50\1\120\1\0\2\50\1\120\1\0\2\50\1\120"+
    "\1\0\1\50\1\52\1\120\1\0\1\52\1\120\1\52"+
    "\1\120\1\52\1\120\1\52\1\120\1\52\14\120\40\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u0172\0\u029a\0\u0172\0\u02e4\0\u032e\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u0172\0\u0172\0\u04ea\0\u0534\0\u057e"+
    "\0\u0172\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784"+
    "\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0172\0\u0940\0\u0172"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u098a\0\u09d4"+
    "\0\u0172\0\u0a1e\0\u0172\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90"+
    "\0\u0172\0\u0bda\0\u0c24\0\u0c6e\0\u0172\0\u0cb8\0\u01bc\0\u0206"+
    "\0\u0250\0\u0172\0\u0172\0\u0d02\0\u0d4c\0\u0172\0\u0172\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u0172\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0172"+
    "\0\u0172\0\u0f9c\0\u0fe6\0\u1030\0\u0172\0\u0172\0\u0172\0\u107a"+
    "\0\u10c4\0\u0172\0\u0172\0\u0172\0\u110e\0\u0172\0\u1158\0\u11a2"+
    "\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u0378\0\u15ae\0\u15f8"+
    "\0\u0378\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u1848\0\u0172\0\u1892\0\u18dc"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u0172\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u0172\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u0172\0\u1ea4\0\u0172"+
    "\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u2188\0\u0378\0\u21d2\0\u221c\0\u2266\0\u0378\0\u22b0"+
    "\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u0378\0\u24b6"+
    "\0\u2500\0\u254a\0\u0378\0\u2594\0\u0172\0\u1970\0\u0172\0\u25de"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u2628\0\u0172\0\u0172\0\u2672\0\u26bc\0\u2706\0\u2750\0\u0172"+
    "\0\u279a\0\u27e4\0\u0378\0\u0378\0\u0378\0\u282e\0\u2878\0\u28c2"+
    "\0\u290c\0\u2956\0\u29a0\0\u0378\0\u0378\0\u29ea\0\u0378\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84"+
    "\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u0378\0\u2e40\0\u0378"+
    "\0\u2e8a\0\u2ed4\0\u0378\0\u2f1e\0\u2f68\0\u0378\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u0378\0\u30da\0\u3124\0\u0378\0\u316e\0\u31b8"+
    "\0\u3202\0\u324c\0\u3296\0\u32e0\0\u0378\0\u332a\0\u0378\0\u0378"+
    "\0\u0378\0\u3374\0\u33be\0\u0378\0\u3408\0\u3452\0\u349c\0\u34e6"+
    "\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u0378\0\u36ec"+
    "\0\u0378\0\u0378\0\u3736\0\u0172\0\u3780\0\u37ca\0\u3814\0\u385e"+
    "\0\u38a8\0\u0378\0\u38f2\0\u0378\0\u393c\0\u3986\0\u39d0\0\u3a1a"+
    "\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u0378"+
    "\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u0172\0\u3d92\0\u3ddc\0\u3e26"+
    "\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u402c\0\u4076"+
    "\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6"+
    "\0\u4310\0\u435a\0\u43a4\0\u43ee\0\u43ee\0\u4438\0\u4482\0\u44cc"+
    "\0\u4516\0\u4560\0\u45aa\0\u45f4\0\u463e\0\u4688\0\u46d2\0\u471c"+
    "\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u4922\0\u496c"+
    "\0\u49b6\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u4b28\0\u4b72\0\u4bbc"+
    "\0\u4c06\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c"+
    "\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c"+
    "\0\u50a6\0\u50f0\0\u513a\0\u5184\0\u51ce\0\u5218\0\u5262\0\u52ac"+
    "\0\u52f6\0\u5340\0\u538a\0\u53d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\6\1\7\1\10\2\6\1\11\55\6\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\12\1\20\1\17\1\21"+
    "\1\17\1\21\2\17\2\21\2\17\1\22\1\17\1\23"+
    "\1\24\1\25\1\12\1\26\1\27\1\30\1\17\1\31"+
    "\1\32\1\33\1\34\2\17\1\35\1\36\1\17\1\37"+
    "\1\40\1\41\1\17\1\42\1\17\1\43\1\44\2\17"+
    "\1\45\1\46\2\17\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\5\21\26\70\1\71\1\70"+
    "\1\72\61\70\1\73\1\74\1\75\24\73\1\12\1\76"+
    "\61\73\112\12\142\0\1\77\1\100\2\0\1\101\107\0"+
    "\1\102\114\0\1\103\56\0\1\14\113\0\1\104\1\105"+
    "\66\0\1\106\111\0\1\107\23\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\23\17\1\0\2\17\21\0\5\17"+
    "\10\0\1\110\1\111\1\112\1\113\1\114\1\115\1\0"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\11\0\1\111"+
    "\1\0\1\123\11\0\1\121\1\113\1\120\30\0\1\116"+
    "\2\117\1\114\1\117\10\0\1\21\1\0\1\21\1\113"+
    "\1\21\2\0\2\21\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\113\1\120\30\0\5\21\10\0"+
    "\1\124\1\0\1\124\1\0\1\124\2\0\2\124\2\0"+
    "\1\125\61\0\5\124\25\0\1\126\46\0\1\127\10\0"+
    "\1\130\35\0\1\131\42\0\1\132\50\0\1\133\40\0"+
    "\1\134\50\0\1\135\40\0\1\136\23\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\1\17\1\137\21\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\2\17\1\140\20\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\5\17\1\141\7\17\1\142\5\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\3\17\1\143\3\17\1\144\13\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\11\17\1\145\1\17\1\146\3\17\1\147\3\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\2\17\1\150\1\151\7\17\1\152\7\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\1\17\1\153\17\17\1\154\1\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\10\17\1\155\5\17\1\156\4\17"+
    "\1\0\1\17\1\157\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\2\17\1\160\4\17\1\161"+
    "\13\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\3\17\1\162\3\17\1\163"+
    "\2\17\1\164\1\165\7\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\21\17"+
    "\1\166\1\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\3\17\1\167\17\17"+
    "\1\0\2\17\21\0\5\17\50\0\1\170\74\0\1\171"+
    "\40\0\1\172\111\0\1\173\115\0\1\174\105\0\1\175"+
    "\4\0\1\176\104\0\1\177\5\0\1\200\103\0\1\201"+
    "\6\0\1\202\102\0\1\203\15\0\26\70\1\0\1\70"+
    "\1\0\61\70\1\204\1\205\1\206\5\204\1\207\1\204"+
    "\1\207\4\204\1\207\1\210\5\204\1\211\1\212\1\213"+
    "\5\204\1\214\1\215\6\204\1\216\1\217\4\204\1\220"+
    "\30\204\1\207\2\210\1\204\1\210\27\0\1\221\64\0"+
    "\1\75\107\0\2\204\1\0\5\204\1\222\1\204\1\222"+
    "\4\204\1\222\1\223\5\204\1\224\1\225\1\226\5\204"+
    "\1\227\1\230\6\204\1\231\1\232\4\204\1\233\30\204"+
    "\1\222\2\223\1\204\1\223\1\104\1\13\1\14\107\104"+
    "\5\105\1\234\104\105\10\0\1\110\1\0\1\112\1\235"+
    "\1\114\2\0\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\1\116"+
    "\2\117\1\114\1\117\10\0\1\236\1\0\1\236\107\0"+
    "\1\117\1\0\1\117\1\235\1\114\2\0\2\117\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\117\1\114\1\117\10\0\1\114\1\0"+
    "\1\114\1\0\1\114\2\0\2\114\1\120\1\121\1\122"+
    "\1\123\13\0\1\123\11\0\1\121\1\0\1\120\30\0"+
    "\5\114\10\0\1\237\2\240\1\0\1\240\1\0\5\240"+
    "\1\0\1\240\11\0\1\240\1\0\2\240\1\0\1\240"+
    "\6\0\1\240\1\0\1\240\30\0\5\240\10\0\1\241"+
    "\1\0\1\241\1\235\1\114\2\0\2\241\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\241\1\114\1\241\10\0\1\242\1\0\1\242"+
    "\1\235\1\114\2\0\2\242\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\242"+
    "\1\114\1\242\10\0\1\124\1\0\1\124\1\0\1\124"+
    "\2\0\2\124\64\0\5\124\10\0\1\243\1\0\1\243"+
    "\1\0\1\243\2\0\2\243\4\0\1\244\55\0\1\244"+
    "\1\0\5\243\10\0\1\124\1\0\1\124\1\0\1\124"+
    "\2\0\2\124\1\120\1\121\1\0\1\123\13\0\1\123"+
    "\11\0\1\121\1\0\1\120\30\0\5\124\12\0\1\245"+
    "\173\0\1\246\50\0\1\247\40\0\1\250\23\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\2\17\1\251\20\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\11\17\1\252\11\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\21\17\1\253\1\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\6\17"+
    "\1\254\14\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\6\17\1\255\2\17"+
    "\1\256\11\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\10\17\1\257\12\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\3\17\1\260\17\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\20\17\1\261\2\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\12\17"+
    "\1\262\10\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\17\17\1\263\3\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\11\17\1\264\11\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\265\5\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\13\17"+
    "\1\266\7\17\1\0\1\267\1\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\1\17\1\270"+
    "\10\17\1\271\10\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\5\17\1\272"+
    "\1\273\14\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\20\17\1\274\2\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\16\17\1\275\4\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\276\5\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\1\17"+
    "\1\277\21\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\10\17\1\300\12\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\10\17\1\301\12\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\12\17\1\302\10\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\1\17"+
    "\1\303\21\17\1\0\2\17\21\0\5\17\63\0\1\304"+
    "\30\0\1\206\117\0\1\210\1\0\1\210\4\0\2\210"+
    "\64\0\3\210\1\0\1\210\10\0\1\305\1\0\1\305"+
    "\4\0\2\305\64\0\3\305\1\0\1\305\10\0\1\306"+
    "\1\0\1\306\4\0\2\306\6\0\1\307\55\0\3\306"+
    "\1\0\1\306\10\0\1\310\1\0\1\310\4\0\2\310"+
    "\6\0\1\307\55\0\3\310\1\0\1\310\27\0\1\311"+
    "\111\0\1\312\111\0\1\313\111\0\1\314\111\0\1\315"+
    "\111\0\1\316\111\0\1\317\111\0\1\320\62\0\4\105"+
    "\1\14\1\234\104\105\10\0\1\321\1\0\1\321\1\322"+
    "\37\0\1\322\46\0\1\237\2\240\1\323\1\240\1\0"+
    "\5\240\1\0\1\240\11\0\1\240\1\0\2\240\1\0"+
    "\1\240\6\0\1\240\1\323\1\240\30\0\5\240\10\0"+
    "\3\324\1\323\1\324\1\0\5\324\1\0\1\324\11\0"+
    "\1\324\1\0\2\324\1\0\1\324\6\0\1\324\1\323"+
    "\1\324\30\0\5\324\10\0\1\325\1\0\1\325\1\235"+
    "\1\114\2\0\2\325\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\325\1\114"+
    "\1\325\10\0\1\326\1\0\1\326\1\235\1\114\2\0"+
    "\2\326\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\326\1\114\1\326\10\0"+
    "\1\243\1\0\1\243\1\0\1\243\2\0\2\243\1\120"+
    "\1\121\27\0\1\121\1\0\1\120\30\0\5\243\10\0"+
    "\1\243\1\0\1\243\1\0\1\243\2\0\2\243\64\0"+
    "\5\243\106\0\1\327\77\0\1\330\23\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\3\17\1\331\17\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\13\17\1\332\7\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\7\17\1\333\13\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\2\17\1\334"+
    "\20\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\2\17\1\335\20\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\5\17\1\336\15\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\11\17\1\337\11\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\11\17\1\340"+
    "\11\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\2\17\1\341\20\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\11\17\1\342\11\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\12\17\1\343\10\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\15\17\1\344"+
    "\5\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\2\17\1\345\20\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\7\17\1\346\13\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\6\17\1\347\14\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\15\17\1\350"+
    "\5\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\11\17\1\351\11\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\7\17\1\352\13\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\3\17\1\353\17\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\6\17\1\354"+
    "\14\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\3\17\1\355\17\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\5\17\1\356\15\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\15\17\1\357\5\17\1\0\2\17\21\0\5\17\56\0"+
    "\1\360\62\0\1\307\72\0\1\361\1\0\1\361\1\322"+
    "\37\0\1\322\46\0\3\362\1\323\1\362\1\0\5\362"+
    "\1\0\1\362\11\0\1\362\1\0\2\362\1\0\1\362"+
    "\6\0\1\362\1\323\1\362\30\0\5\362\10\0\1\363"+
    "\1\0\1\363\1\235\1\114\2\0\2\363\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\363\1\114\1\363\10\0\1\364\1\0\1\364"+
    "\1\235\1\114\2\0\2\364\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\364"+
    "\1\114\1\364\107\0\1\365\10\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\4\17\1\366\16\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\1\17\1\367\21\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\21\17"+
    "\1\370\1\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\12\17\1\371\10\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\12\17\1\372\10\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\1\17\1\373\21\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\5\17"+
    "\1\374\15\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\22\17\1\375\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\17\17\1\376\3\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\13\17\1\377\7\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\3\17\1\u0100"+
    "\17\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\1\17\1\u0101\21\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\13\17\1\u0102\7\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\2\17\1\u0103\20\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\15\17\1\u0104"+
    "\5\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\11\17\1\u0105\11\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\2\17\1\u0106\20\17\1\0\2\17\21\0"+
    "\5\17\45\0\1\u0107\54\0\1\u0108\1\0\1\u0108\1\322"+
    "\37\0\1\322\46\0\3\u0109\1\323\1\u0109\1\0\5\u0109"+
    "\1\0\1\u0109\11\0\1\u0109\1\0\2\u0109\1\0\1\u0109"+
    "\6\0\1\u0109\1\323\1\u0109\30\0\5\u0109\10\0\1\u010a"+
    "\1\0\1\u010a\1\235\1\114\2\0\2\u010a\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u010a\1\114\1\u010a\10\0\1\u010b\1\0\1\u010b"+
    "\1\235\1\114\2\0\2\u010b\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u010b"+
    "\1\114\1\u010b\106\0\1\u010c\11\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\10\17\1\u010d\12\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\10\17\1\u010e\12\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\5\17"+
    "\1\u010f\15\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\21\17\1\u0110\1\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\2\17\1\u0111\20\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\14\17\1\u0112\6\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\10\17"+
    "\1\u0113\12\17\1\0\2\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\11\17\1\u0114\11\17"+
    "\1\0\2\17\21\0\5\17\6\0\15\17\1\0\1\17"+
    "\7\0\1\17\1\0\15\17\1\u0115\5\17\1\0\2\17"+
    "\21\0\5\17\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\15\17\1\u0116\5\17\1\0\2\17\21\0\5\17"+
    "\6\0\15\17\1\0\1\17\7\0\1\17\1\0\12\17"+
    "\1\u0117\10\17\1\0\2\17\21\0\5\17\37\0\1\u0118"+
    "\62\0\1\u0119\1\0\1\u0119\1\322\37\0\1\322\46\0"+
    "\3\u011a\1\323\1\u011a\1\0\5\u011a\1\0\1\u011a\11\0"+
    "\1\u011a\1\0\2\u011a\1\0\1\u011a\6\0\1\u011a\1\323"+
    "\1\u011a\30\0\5\u011a\10\0\1\u011b\1\0\1\u011b\1\235"+
    "\1\114\2\0\2\u011b\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u011b\1\114"+
    "\1\u011b\10\0\1\u011c\1\0\1\u011c\1\235\1\114\2\0"+
    "\2\u011c\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u011c\1\114\1\u011c\110\0"+
    "\1\u011d\7\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\13\17\1\u011e\7\17\1\0\2\17\21\0\5\17\6\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\2\17\1\u011f"+
    "\20\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\5\17\1\u0120\15\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\11\17\1\u0121\11\17\1\0\2\17\21\0"+
    "\5\17\6\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\23\17\1\0\1\u0122\1\17\21\0\5\17\6\0\15\17"+
    "\1\0\1\17\7\0\1\17\1\0\7\17\1\u0123\13\17"+
    "\1\0\2\17\21\0\5\17\47\0\1\u0124\52\0\1\u0125"+
    "\1\0\1\u0125\1\322\37\0\1\322\46\0\3\u0126\1\323"+
    "\1\u0126\1\0\5\u0126\1\0\1\u0126\11\0\1\u0126\1\0"+
    "\2\u0126\1\0\1\u0126\6\0\1\u0126\1\323\1\u0126\30\0"+
    "\5\u0126\10\0\1\u0127\1\0\1\u0127\1\235\1\114\2\0"+
    "\2\u0127\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0127\1\114\1\u0127\10\0"+
    "\1\u0128\1\0\1\u0128\1\235\1\114\2\0\2\u0128\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u0128\1\114\1\u0128\17\0\1\u0129\100\0"+
    "\15\17\1\0\1\17\7\0\1\17\1\0\2\17\1\u012a"+
    "\20\17\1\0\2\17\21\0\5\17\6\0\15\17\1\0"+
    "\1\17\7\0\1\17\1\0\2\17\1\u012b\20\17\1\0"+
    "\2\17\21\0\5\17\6\0\15\17\1\0\1\17\7\0"+
    "\1\17\1\0\10\17\1\u012c\12\17\1\0\2\17\21\0"+
    "\5\17\10\0\1\u012d\1\0\1\u012d\1\322\37\0\1\322"+
    "\46\0\3\u012e\1\323\1\u012e\1\0\5\u012e\1\0\1\u012e"+
    "\11\0\1\u012e\1\0\2\u012e\1\0\1\u012e\6\0\1\u012e"+
    "\1\323\1\u012e\30\0\5\u012e\10\0\1\u012f\1\0\1\u012f"+
    "\1\235\1\114\2\0\2\u012f\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u012f"+
    "\1\114\1\u012f\10\0\1\u0130\1\0\1\u0130\1\235\1\114"+
    "\2\0\2\u0130\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u0130\1\114\1\u0130"+
    "\111\0\1\u0131\6\0\15\17\1\0\1\17\7\0\1\17"+
    "\1\0\7\17\1\u0132\13\17\1\0\2\17\21\0\5\17"+
    "\10\0\1\u0133\1\0\1\u0133\1\322\37\0\1\322\46\0"+
    "\3\u0134\1\323\1\u0134\1\0\5\u0134\1\0\1\u0134\11\0"+
    "\1\u0134\1\0\2\u0134\1\0\1\u0134\6\0\1\u0134\1\323"+
    "\1\u0134\30\0\5\u0134\10\0\1\u0135\1\0\1\u0135\1\235"+
    "\1\114\2\0\2\u0135\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u0135\1\114"+
    "\1\u0135\10\0\1\u0136\1\0\1\u0136\1\235\1\114\2\0"+
    "\2\u0136\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0136\1\114\1\u0136\106\0"+
    "\1\u0137\11\0\15\17\1\0\1\17\7\0\1\17\1\0"+
    "\16\17\1\u0138\4\17\1\0\2\17\21\0\5\17\10\0"+
    "\1\u0139\1\0\1\u0139\1\322\37\0\1\322\46\0\3\u013a"+
    "\1\323\1\u013a\1\0\5\u013a\1\0\1\u013a\11\0\1\u013a"+
    "\1\0\2\u013a\1\0\1\u013a\6\0\1\u013a\1\323\1\u013a"+
    "\30\0\5\u013a\10\0\1\u013b\1\0\1\u013b\1\235\1\114"+
    "\2\0\2\u013b\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u013b\1\114\1\u013b"+
    "\10\0\1\u013c\1\0\1\u013c\1\235\1\114\2\0\2\u013c"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u013c\1\114\1\u013c\110\0\1\u013d"+
    "\11\0\1\u013e\1\0\1\u013e\1\322\37\0\1\322\46\0"+
    "\3\u013f\1\323\1\u013f\1\0\5\u013f\1\0\1\u013f\11\0"+
    "\1\u013f\1\0\2\u013f\1\0\1\u013f\6\0\1\u013f\1\323"+
    "\1\u013f\30\0\5\u013f\10\0\1\u0140\1\0\1\u0140\1\235"+
    "\1\114\2\0\2\u0140\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u0140\1\114"+
    "\1\u0140\10\0\1\u0141\1\0\1\u0141\1\235\1\114\2\0"+
    "\2\u0141\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0141\1\114\1\u0141\10\0"+
    "\1\u0142\1\0\1\u0142\1\322\37\0\1\322\46\0\3\u0143"+
    "\1\323\1\u0143\1\0\5\u0143\1\0\1\u0143\11\0\1\u0143"+
    "\1\0\2\u0143\1\0\1\u0143\6\0\1\u0143\1\323\1\u0143"+
    "\30\0\5\u0143\10\0\1\u0144\1\0\1\u0144\1\235\1\114"+
    "\2\0\2\u0144\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\3\u0144\1\114\1\u0144"+
    "\10\0\1\u0145\1\0\1\u0145\1\235\1\114\2\0\2\u0145"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u0145\1\114\1\u0145\10\0\1\u0146"+
    "\1\0\1\u0146\1\322\37\0\1\322\46\0\3\u0147\1\323"+
    "\1\u0147\1\0\5\u0147\1\0\1\u0147\11\0\1\u0147\1\0"+
    "\2\u0147\1\0\1\u0147\6\0\1\u0147\1\323\1\u0147\30\0"+
    "\5\u0147\10\0\1\u0148\1\0\1\u0148\1\235\1\114\2\0"+
    "\2\u0148\1\120\1\121\1\122\1\123\13\0\1\123\11\0"+
    "\1\121\1\235\1\120\30\0\3\u0148\1\114\1\u0148\10\0"+
    "\1\u0149\1\0\1\u0149\1\235\1\114\2\0\2\u0149\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u0149\1\114\1\u0149\10\0\1\u014a\1\0"+
    "\1\u014a\1\322\37\0\1\322\46\0\3\u014b\1\323\1\u014b"+
    "\1\0\5\u014b\1\0\1\u014b\11\0\1\u014b\1\0\2\u014b"+
    "\1\0\1\u014b\6\0\1\u014b\1\323\1\u014b\30\0\5\u014b"+
    "\10\0\1\u014c\1\0\1\u014c\1\235\1\114\2\0\2\u014c"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u014c\1\114\1\u014c\10\0\1\u014d"+
    "\1\0\1\u014d\1\235\1\114\2\0\2\u014d\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u014d\1\114\1\u014d\10\0\1\u014e\1\0\1\u014e"+
    "\1\322\37\0\1\322\46\0\3\u014f\1\323\1\u014f\1\0"+
    "\5\u014f\1\0\1\u014f\11\0\1\u014f\1\0\2\u014f\1\0"+
    "\1\u014f\6\0\1\u014f\1\323\1\u014f\30\0\5\u014f\10\0"+
    "\1\u0150\1\0\1\u0150\1\235\1\114\2\0\2\u0150\1\120"+
    "\1\121\1\122\1\123\13\0\1\123\11\0\1\121\1\235"+
    "\1\120\30\0\3\u0150\1\114\1\u0150\10\0\1\u0151\1\0"+
    "\1\u0151\1\235\1\114\2\0\2\u0151\1\120\1\121\1\122"+
    "\1\123\13\0\1\123\11\0\1\121\1\235\1\120\30\0"+
    "\3\u0151\1\114\1\u0151\10\0\1\u0152\1\0\1\u0152\1\322"+
    "\37\0\1\322\46\0\3\u0153\1\323\1\u0153\1\0\5\u0153"+
    "\1\0\1\u0153\11\0\1\u0153\1\0\2\u0153\1\0\1\u0153"+
    "\6\0\1\u0153\1\323\1\u0153\30\0\5\u0153\10\0\1\u0154"+
    "\1\0\1\u0154\1\235\1\114\2\0\2\u0154\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u0154\1\114\1\u0154\10\0\1\u0155\1\0\1\u0155"+
    "\1\235\1\114\2\0\2\u0155\1\120\1\121\1\122\1\123"+
    "\13\0\1\123\11\0\1\121\1\235\1\120\30\0\3\u0155"+
    "\1\114\1\u0155\10\0\1\u0156\1\0\1\u0156\1\322\37\0"+
    "\1\322\46\0\3\u0157\1\323\1\u0157\1\0\5\u0157\1\0"+
    "\1\u0157\11\0\1\u0157\1\0\2\u0157\1\0\1\u0157\6\0"+
    "\1\u0157\1\323\1\u0157\30\0\5\u0157\10\0\1\u0158\1\0"+
    "\1\u0158\1\235\1\114\2\0\2\u0158\1\120\1\121\1\122"+
    "\1\123\13\0\1\123\11\0\1\121\1\235\1\120\30\0"+
    "\3\u0158\1\114\1\u0158\10\0\1\u0159\1\0\1\u0159\1\322"+
    "\37\0\1\322\51\0\1\323\37\0\1\323\46\0\1\u015a"+
    "\1\0\1\u015a\1\235\1\114\2\0\2\u015a\1\120\1\121"+
    "\1\122\1\123\13\0\1\123\11\0\1\121\1\235\1\120"+
    "\30\0\3\u015a\1\114\1\u015a\10\0\1\u015b\1\0\1\u015b"+
    "\1\322\37\0\1\322\46\0\1\u015c\1\0\1\u015c\1\235"+
    "\1\114\2\0\2\u015c\1\120\1\121\1\122\1\123\13\0"+
    "\1\123\11\0\1\121\1\235\1\120\30\0\3\u015c\1\114"+
    "\1\u015c\10\0\1\u015d\1\0\1\u015d\1\322\37\0\1\322"+
    "\46\0\1\u015e\1\0\1\u015e\1\235\1\114\2\0\2\u015e"+
    "\1\120\1\121\1\122\1\123\13\0\1\123\11\0\1\121"+
    "\1\235\1\120\30\0\3\u015e\1\114\1\u015e\10\0\1\u015f"+
    "\1\0\1\u015f\1\322\37\0\1\322\46\0\1\u0160\1\0"+
    "\1\u0160\1\235\1\114\2\0\2\u0160\1\120\1\121\1\122"+
    "\1\123\13\0\1\123\11\0\1\121\1\235\1\120\30\0"+
    "\3\u0160\1\114\1\u0160\10\0\1\u0161\1\0\1\u0161\1\322"+
    "\37\0\1\322\46\0\1\114\1\0\1\114\1\235\1\114"+
    "\2\0\2\114\1\120\1\121\1\122\1\123\13\0\1\123"+
    "\11\0\1\121\1\235\1\120\30\0\5\114\10\0\1\u0162"+
    "\1\0\1\u0162\1\322\37\0\1\322\46\0\1\u0163\1\0"+
    "\1\u0163\1\322\37\0\1\322\46\0\1\u0164\1\0\1\u0164"+
    "\1\322\37\0\1\322\46\0\1\u0165\1\0\1\u0165\1\322"+
    "\37\0\1\322\46\0\1\u0166\1\0\1\u0166\1\322\37\0"+
    "\1\322\46\0\1\u0167\1\0\1\u0167\1\322\37\0\1\322"+
    "\46\0\1\u0168\1\0\1\u0168\1\322\37\0\1\322\46\0"+
    "\1\u0169\1\0\1\u0169\1\322\37\0\1\322\46\0\1\u016a"+
    "\1\0\1\u016a\1\322\37\0\1\322\46\0\1\u016b\1\0"+
    "\1\u016b\1\322\37\0\1\322\46\0\1\u016c\1\0\1\u016c"+
    "\1\322\37\0\1\322\46\0\1\u016d\1\0\1\u016d\1\322"+
    "\37\0\1\322\46\0\1\u016e\1\0\1\u016e\1\322\37\0"+
    "\1\322\46\0\1\u016f\1\0\1\u016f\1\322\37\0\1\322"+
    "\46\0\1\u0170\1\0\1\u0170\1\322\37\0\1\322\46\0"+
    "\1\u0171\1\0\1\u0171\1\322\37\0\1\322\46\0\1\u0172"+
    "\1\0\1\u0172\1\322\37\0\1\322\46\0\1\u0173\1\0"+
    "\1\u0173\1\322\37\0\1\322\46\0\1\u0174\1\0\1\u0174"+
    "\1\322\37\0\1\322\46\0\1\u0175\1\0\1\u0175\1\322"+
    "\37\0\1\322\46\0\1\u0176\1\0\1\u0176\1\322\37\0"+
    "\1\322\46\0\1\u0177\1\0\1\u0177\1\322\37\0\1\322"+
    "\46\0\1\u0178\1\0\1\u0178\1\322\37\0\1\322\46\0"+
    "\1\u0179\1\0\1\u0179\1\322\37\0\1\322\46\0\1\u017a"+
    "\1\0\1\u017a\1\322\37\0\1\322\46\0\1\u017b\1\0"+
    "\1\u017b\1\322\37\0\1\322\46\0\1\u017c\1\0\1\u017c"+
    "\1\322\37\0\1\322\46\0\1\u017d\1\0\1\u017d\1\322"+
    "\37\0\1\322\46\0\1\u017e\1\0\1\u017e\1\322\37\0"+
    "\1\322\46\0\1\u017f\1\0\1\u017f\1\322\37\0\1\322"+
    "\46\0\1\u0180\1\0\1\u0180\1\322\37\0\1\322\46\0"+
    "\1\u0181\1\0\1\u0181\1\322\37\0\1\322\46\0\1\u0182"+
    "\1\0\1\u0182\1\322\37\0\1\322\46\0\1\u0183\1\0"+
    "\1\u0183\1\322\37\0\1\322\46\0\1\u0184\1\0\1\u0184"+
    "\1\322\37\0\1\322\46\0\1\u0185\1\0\1\u0185\1\322"+
    "\37\0\1\322\46\0\1\u0186\1\0\1\u0186\1\322\37\0"+
    "\1\322\46\0\1\u0187\1\0\1\u0187\1\322\37\0\1\322"+
    "\46\0\1\u0188\1\0\1\u0188\1\322\37\0\1\322\46\0"+
    "\1\u0189\1\0\1\u0189\1\322\37\0\1\322\46\0\1\u018a"+
    "\1\0\1\u018a\1\322\37\0\1\322\46\0\1\u018b\1\0"+
    "\1\u018b\1\322\37\0\1\322\46\0\1\u018c\1\0\1\u018c"+
    "\1\322\37\0\1\322\51\0\1\322\37\0\1\322\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21534];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\1\11\7\1\2\11"+
    "\3\1\1\11\14\1\1\11\1\1\7\11\2\1\1\11"+
    "\1\1\1\11\5\1\1\11\3\1\1\11\1\1\3\0"+
    "\2\11\1\1\1\0\2\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\2\11\2\0\1\1\3\11\1\0"+
    "\1\1\3\11\1\1\1\11\31\1\1\0\14\11\1\1"+
    "\1\11\2\1\11\11\12\1\1\0\1\11\6\1\2\0"+
    "\1\11\1\1\1\11\33\1\1\0\1\11\1\0\1\11"+
    "\1\0\10\11\1\1\2\11\3\1\1\0\1\11\27\1"+
    "\1\0\4\1\1\0\21\1\1\0\4\1\1\0\13\1"+
    "\1\0\4\1\1\0\6\1\1\11\4\1\1\0\7\1"+
    "\1\0\5\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\25\1\40\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //================ >> user code

    private boolean interpolationFlag = false;
    private boolean leftInterpolationFlag = true;

    private boolean trimCodeBlockBlankLine = false;
    private FastCharBuffer stringBuffer = new FastCharBuffer(256);
    private int stringLine = 0;
    private int stringColumn = 0;
    
    public void setTrimCodeBlockBlankLine(boolean flag){
        trimCodeBlockBlankLine = flag;
    }
    
    public int getColumn(){
        return yycolumn+1;
    }
    
    public int getLine(){
        return yyline+1;
    }

    public char yychar(){
        return (char)yychar;
    }

    private char[] popAsCharArray() {
        char[] chars = stringBuffer.toArray();
        stringBuffer.clear();
        return chars;
    }

    private char[] popAsCharArraySkipIfLeftNewLine() {
        char[] chars = stringBuffer.toArraySkipIfLeftNewLine();
        stringBuffer.clear();
        return chars;
    }

    private String popAsString() {
        return new String(popAsCharArray());
    }

    private void resetString() {
        stringBuffer.clear();
        stringLine = yyline;
        stringColumn = yycolumn;
    }

    private void appendToString(char c) {
        stringBuffer.append(c);
    }

    private void appendToString(char c, int repeat) {
        if(repeat > 12){
            stringBuffer.append(new RepeatChars(c, repeat));
        }else if(repeat >2){
            final char[] chars = new char[repeat];
            while (repeat != 0) {
                chars[--repeat] = c;
            }
            stringBuffer.append(chars);
        }else if (repeat == 2) {
            stringBuffer.append(c).append(c);
        }else if (repeat == 1) {
            stringBuffer.append(c);
        }
    }

    private void appendToString(String string) {
        stringBuffer.append(string);
    }

    private void pullToString() {
        stringBuffer.append(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    private void pullToString(int startOffset, int endOffset) {
        stringBuffer.append(zzBuffer, zzStartRead + startOffset, zzMarkedPos - zzStartRead + endOffset);
    }

    private Symbol symbol(int sym) {
        return new Symbol(sym, yyline + 1, yycolumn + 1, sym);
    }

    private Symbol symbol(int sym, Object val) {
        return new Symbol(sym, yyline + 1, yycolumn + 1, val);
    }
    
    private Symbol symbol(int sym, int line, int column, Object val) {
        return new Symbol(sym, line, column, val);
    }

    private Symbol popTextStatementSymbol(boolean interpolationFlag){
        this.interpolationFlag = interpolationFlag;
        yybegin(YYSTATEMENT);
        final char[] chars;
        if(trimCodeBlockBlankLine){
            if(!interpolationFlag){
                stringBuffer.trimRightBlankToNewLine();
            }
            chars = this.leftInterpolationFlag
                    ? popAsCharArray()
                    : popAsCharArraySkipIfLeftNewLine();
        }else{
            chars = popAsCharArray();
        }
        return symbol(Tokens.TEXT_STATEMENT, stringLine, stringColumn, chars);
    }

    public final String yytext(int startOffset, int endOffset) {
        return new String(zzBuffer, zzStartRead + startOffset, zzMarkedPos - zzStartRead + endOffset);
    }

    public final String yytext(int endOffset) {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead + endOffset);
    }

    public final char yyTextChar(int startOffset) {
        return zzBuffer[zzStartRead + startOffset];
    }

    public final char yyTextChar() {
        return zzBuffer[zzStartRead];
    }

    private long yyLong(int startOffset, int endOffset, int radix){
        return parseLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset, radix);
    }

    private int yyInt(int startOffset, int endOffset, int radix){
        return (int) parseLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset, radix);
    }

    private long yyBinLong(int startOffset, int endOffset){
        return parseBinLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset);
    }

    private int yyBinInteger(int startOffset, int endOffset){
        return (int) parseBinLong(zzBuffer, zzStartRead + startOffset, zzMarkedPos + endOffset);
    }

    private long parseBinLong(char[] buffer, int start, int end) {
        long result = 0;
        while (start < end) {
            result <<= 1;
            if(buffer[start++] == '1'){
                ++ result;
            }
        }
        return result;
    }

    /**
     * assumes correct representation of a long value for specified radix in
     * scanner buffer from
     * <code>start</code> to
     * <code>end</code>
     */
    private long parseLong(char[] buffer, int start, int end, int radix) {
        long result = 0;
        while (start < end) {
            result = result * radix + Character.digit(buffer[start++], radix);
        }
        return result;
    }

    //================ << user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { char val = (char) Integer.parseInt(yytext(1,0),8); appendToString(val);
          }
        case 125: break;
        case 40: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(1, 0, 8));
          }
        case 126: break;
        case 98: 
          { return symbol(Tokens.DIRECT_VALUE, yyBinLong(2, -1));
          }
        case 127: break;
        case 20: 
          { if(!interpolationFlag){return symbol(Tokens.RBRACE);}else{yybegin(YYINITIAL); leftInterpolationFlag = true;return symbol(Tokens.INTERPOLATION_END);}
          }
        case 128: break;
        case 38: 
          { return symbol(Tokens.SELFEQ, Operators.DIVEQ);
          }
        case 129: break;
        case 100: 
          { return symbol(Tokens.SELFEQ, Operators.URSHIFTEQ);
          }
        case 130: break;
        case 49: 
          { return symbol(Tokens.LTEQ);
          }
        case 131: break;
        case 15: 
          { return symbol(Tokens.LBRACE);
          }
        case 132: break;
        case 54: 
          { return symbol(Tokens.IF);
          }
        case 133: break;
        case 109: 
          { return symbol(Tokens.SUPER);
          }
        case 134: break;
        case 77: 
          { appendToString( '\f' );
          }
        case 135: break;
        case 9: 
          { return symbol(Tokens.MINUS);
          }
        case 136: break;
        case 114: 
          { return symbol(Tokens.STATIC);
          }
        case 137: break;
        case 44: 
          { return symbol(Tokens.DIRECT_VALUE, new Double(yytext(0, -1)));
          }
        case 138: break;
        case 6: 
          { return symbol(Tokens.IDENTIFIER, yytext().intern());
          }
        case 139: break;
        case 5: 
          { return symbol(Tokens.MULT);
          }
        case 140: break;
        case 59: 
          { return symbol(Tokens.QUESTION_COLON);
          }
        case 141: break;
        case 16: 
          { return symbol(Tokens.FUNCTION);
          }
        case 142: break;
        case 63: 
          { return symbol(Tokens.OROR);
          }
        case 143: break;
        case 121: 
          { return symbol(Tokens.NATIVE_IMPORT);
          }
        case 144: break;
        case 105: 
          { return symbol(Tokens.DIRECT_VALUE, Boolean.TRUE);
          }
        case 145: break;
        case 78: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, yyTextChar());
          }
        case 146: break;
        case 33: 
          { return symbol(Tokens.XOR);
          }
        case 147: break;
        case 46: 
          { return symbol(Tokens.MINUSMINUS);
          }
        case 148: break;
        case 88: 
          { return symbol(Tokens.VAR);
          }
        case 149: break;
        case 68: 
          { /* escape new line */
          }
        case 150: break;
        case 41: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(0, -1, 10));
          }
        case 151: break;
        case 29: 
          { return symbol(Tokens.COLON);
          }
        case 152: break;
        case 66: 
          { return symbol(Tokens.SELFEQ, Operators.XOREQ);
          }
        case 153: break;
        case 102: 
          { return symbol(Tokens.ELSE);
          }
        case 154: break;
        case 19: 
          { return symbol(Tokens.RPAREN);
          }
        case 155: break;
        case 67: 
          { throw new ParseException("Illegal escape sequence \""+yytext()+"\"", getLine(), getColumn());
          }
        case 156: break;
        case 11: 
          { yybegin(CHARLITERAL);
          }
        case 157: break;
        case 53: 
          { return symbol(Tokens.GTEQ);
          }
        case 158: break;
        case 104: 
          { return symbol(Tokens.DIRECT_VALUE, null);
          }
        case 159: break;
        case 58: 
          { return symbol(Tokens.NOTEQ);
          }
        case 160: break;
        case 50: 
          { leftInterpolationFlag = false; yybegin(YYINITIAL);
          }
        case 161: break;
        case 101: 
          { return symbol(Tokens.ECHO);
          }
        case 162: break;
        case 112: 
          { return symbol(Tokens.WHILE);
          }
        case 163: break;
        case 92: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\\');
          }
        case 164: break;
        case 42: 
          { return symbol(Tokens.DIRECT_VALUE, new Double(yytext()));
          }
        case 165: break;
        case 37: 
          { int length = yylength()-2;appendToString('\\',length/2);if(length%2 == 0){return popTextStatementSymbol(true);} else {appendToString("${");}
          }
        case 166: break;
        case 2: 
          { throw new ParseException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn, getLine(), getColumn());
          }
        case 167: break;
        case 52: 
          { return symbol(Tokens.RSHIFT);
          }
        case 168: break;
        case 23: 
          { return symbol(Tokens.SEMICOLON);
          }
        case 169: break;
        case 108: 
          { return symbol(Tokens.CATCH);
          }
        case 170: break;
        case 24: 
          { return symbol(Tokens.COMMA);
          }
        case 171: break;
        case 64: 
          { return symbol(Tokens.SELFEQ, Operators.PLUSEQ);
          }
        case 172: break;
        case 36: 
          { int length = yylength()-2;appendToString('\\',length/2);if(length%2 == 0){return popTextStatementSymbol(false);} else {appendToString("<%");}
          }
        case 173: break;
        case 83: 
          { return symbol(Tokens.URSHIFT);
          }
        case 174: break;
        case 116: 
          { return symbol(Tokens.NATIVE);
          }
        case 175: break;
        case 119: 
          { return symbol(Tokens.DEFAULT);
          }
        case 176: break;
        case 120: 
          { return symbol(Tokens.FINALLY);
          }
        case 177: break;
        case 115: 
          { return symbol(Tokens.SWITCH);
          }
        case 178: break;
        case 65: 
          { return symbol(Tokens.PLUSPLUS);
          }
        case 179: break;
        case 17: 
          { return symbol(Tokens.AT);
          }
        case 180: break;
        case 18: 
          { return symbol(Tokens.LPAREN);
          }
        case 181: break;
        case 118: 
          { return symbol(Tokens.INCLUDE);
          }
        case 182: break;
        case 47: 
          { return symbol(Tokens.SELFEQ, Operators.MINUSEQ);
          }
        case 183: break;
        case 76: 
          { appendToString( '\t' );
          }
        case 184: break;
        case 93: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\b');
          }
        case 185: break;
        case 56: 
          { return symbol(Tokens.EQGT);
          }
        case 186: break;
        case 122: 
          { return symbol(Tokens.CONTINUE);
          }
        case 187: break;
        case 57: 
          { return symbol(Tokens.EQEQ);
          }
        case 188: break;
        case 87: 
          { return symbol(Tokens.FOR);
          }
        case 189: break;
        case 32: 
          { return symbol(Tokens.PLUS);
          }
        case 190: break;
        case 48: 
          { return symbol(Tokens.LSHIFT);
          }
        case 191: break;
        case 81: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(2, 0, 16));
          }
        case 192: break;
        case 97: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\f');
          }
        case 193: break;
        case 111: 
          { return symbol(Tokens.DIRECT_VALUE, Boolean.FALSE);
          }
        case 194: break;
        case 75: 
          { appendToString( '\n' );
          }
        case 195: break;
        case 45: 
          { return symbol(Tokens.DOTDOT);
          }
        case 196: break;
        case 14: 
          { return symbol(Tokens.GT);
          }
        case 197: break;
        case 7: 
          { return symbol(Tokens.DIRECT_VALUE, yyInt(0, 0, 10));
          }
        case 198: break;
        case 124: 
          { return symbol(Tokens.DIRECT_VALUE, Integer.MIN_VALUE);
          }
        case 199: break;
        case 106: 
          { return symbol(Tokens.THIS);
          }
        case 200: break;
        case 85: 
          { return symbol(Tokens.NEW);
          }
        case 201: break;
        case 25: 
          { return symbol(Tokens.EQ);
          }
        case 202: break;
        case 110: 
          { return symbol(Tokens.THROW);
          }
        case 203: break;
        case 4: 
          { return symbol(Tokens.DIV);
          }
        case 204: break;
        case 1: 
          { pullToString();
          }
        case 205: break;
        case 22: 
          { return symbol(Tokens.RBRACK);
          }
        case 206: break;
        case 55: 
          { return symbol(Tokens.DO);
          }
        case 207: break;
        case 39: 
          { return symbol(Tokens.SELFEQ, Operators.MULTEQ);
          }
        case 208: break;
        case 13: 
          { return symbol(Tokens.MOD);
          }
        case 209: break;
        case 117: 
          { return symbol(Tokens.IMPORT);
          }
        case 210: break;
        case 35: 
          { throw new ParseException("Unterminated character literal at end of line", getLine(), getColumn());
          }
        case 211: break;
        case 80: 
          { return symbol(Tokens.DIRECT_VALUE, yyBinInteger(2, 0));
          }
        case 212: break;
        case 60: 
          { return symbol(Tokens.SELFEQ, Operators.ANDEQ);
          }
        case 213: break;
        case 12: 
          { return symbol(Tokens.LT);
          }
        case 214: break;
        case 51: 
          { return symbol(Tokens.SELFEQ, Operators.MODEQ);
          }
        case 215: break;
        case 123: 
          { return symbol(Tokens.INSTANCEOF);
          }
        case 216: break;
        case 89: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, (char) yyInt(1, -1 ,8));
          }
        case 217: break;
        case 43: 
          { return symbol(Tokens.DIRECT_VALUE, new Float(yytext(0, -1)));
          }
        case 218: break;
        case 79: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(1, -1, 8));
          }
        case 219: break;
        case 86: 
          { return symbol(Tokens.TRY);
          }
        case 220: break;
        case 95: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\n');
          }
        case 221: break;
        case 10: 
          { yybegin(STRING); resetString();
          }
        case 222: break;
        case 90: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\"');
          }
        case 223: break;
        case 34: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, stringLine, stringColumn, popAsString());
          }
        case 224: break;
        case 107: 
          { return symbol(Tokens.BREAK);
          }
        case 225: break;
        case 99: 
          { return symbol(Tokens.DIRECT_VALUE, yyLong(2, -1, 16));
          }
        case 226: break;
        case 74: 
          { appendToString( '\r' );
          }
        case 227: break;
        case 27: 
          { return symbol(Tokens.COMP);
          }
        case 228: break;
        case 73: 
          { appendToString( '\b' );
          }
        case 229: break;
        case 31: 
          { return symbol(Tokens.OR);
          }
        case 230: break;
        case 3: 
          { /* ignore */
          }
        case 231: break;
        case 8: 
          { return symbol(Tokens.DOT);
          }
        case 232: break;
        case 21: 
          { return symbol(Tokens.LBRACK);
          }
        case 233: break;
        case 113: 
          { return symbol(Tokens.RETURN);
          }
        case 234: break;
        case 82: 
          { return symbol(Tokens.SELFEQ, Operators.LSHIFTEQ);
          }
        case 235: break;
        case 94: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\r');
          }
        case 236: break;
        case 30: 
          { return symbol(Tokens.AND);
          }
        case 237: break;
        case 70: 
          { appendToString( '\"' );
          }
        case 238: break;
        case 61: 
          { return symbol(Tokens.ANDAND);
          }
        case 239: break;
        case 91: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\'');
          }
        case 240: break;
        case 28: 
          { return symbol(Tokens.QUESTION);
          }
        case 241: break;
        case 96: 
          { yybegin(YYSTATEMENT); return symbol(Tokens.DIRECT_VALUE, '\t');
          }
        case 242: break;
        case 71: 
          { appendToString( '\'' );
          }
        case 243: break;
        case 103: 
          { return symbol(Tokens.CASE);
          }
        case 244: break;
        case 72: 
          { appendToString( '\\' );
          }
        case 245: break;
        case 26: 
          { return symbol(Tokens.NOT);
          }
        case 246: break;
        case 84: 
          { return symbol(Tokens.SELFEQ, Operators.RSHIFTEQ);
          }
        case 247: break;
        case 62: 
          { return symbol(Tokens.SELFEQ, Operators.OREQ);
          }
        case 248: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              yybegin(END_OF_FILE); return symbol(Tokens.TEXT_STATEMENT,  stringLine,stringColumn, popAsCharArray());
            }
            case 397: break;
            case END_OF_FILE: {
              return symbol(Tokens.EOF);
            }
            case 398: break;
            default:
              {
                return symbol(Tokens.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
