<%

    var CONST;

    @import org.junit.Assert;
    var _assertEquals = native Assert.assertEquals(String, Object, Object);
    var _assertNotEquals = native Assert.assertNotEquals(String, Object, Object);
    var _assertTrue = native Assert.assertTrue(String, boolean);
    var _assertFalse = native Assert.assertFalse(String, boolean);
    var _assertNull = native Assert.assertNull(String, Object);
    var _assertNotNull = native Assert.assertNotNull(String, Object);
    var _assertSame = native Assert.assertSame(String, Object, Object);
    var _assertNotSame = native Assert.assertNotSame(String, Object, Object);
    var _assertArrayEquals = native Assert.assertArrayEquals(String, Object[], Object[]);
    var _assertArrayEquals_chars = native Assert.assertArrayEquals(String, char[], char[]);

    CONST.assertTrue = function(object, msg){
        _assertTrue(msg, object);
        assertCount++ ;
    };

    CONST.assertNone = function(object, msg){
        assertCount++ ;
    };

    CONST.assertFalse = function(object, msg){
        _assertFalse(msg, object);
        assertCount++ ;
    };

    CONST.assertEquals = function(first, second, msg){
        _assertEquals(msg, first, second);
        assertCount++ ;
    };

    CONST.assertNotEquals = function(first, second, msg){
        _assertNotEquals(msg, first, second);
        assertCount++ ;
    };

    CONST.assertNull = function(object, msg){
        _assertNull(msg, object);
        assertCount++ ;
    };

    CONST.assertNotNull = function(object, msg){
        _assertNotNull(msg, object);
        assertCount++ ;
    };

    CONST.assertSame = function(first, second, msg){
        _assertSame(msg, first, second);
        assertCount++ ;
    };

    CONST.assertNotSame = function(first, second, msg){
        _assertNotSame(msg, first, second);
        assertCount++ ;
    };

    CONST.assertArrayEquals = function(first, second, msg){
        _assertArrayEquals(msg, first, second);
        assertCount++ ;
    };

    CONST.assertArrayEquals_chars = function(first, second, msg){
        _assertArrayEquals_chars(msg, first, second);
        assertCount++ ;
    };

%>