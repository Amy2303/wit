<%

{

    assertEquals(3, 1+2);
    assertEquals(-1, 1-2);
    assertEquals(4, 2*2);
    assertEquals(2, 5/2);
    assertEquals(1, 5%2);
    assertEquals(20,5 << 2);
    assertEquals(1, 5 >> 2);
    assertEquals(-2, -5 >> 2);
    assertEquals(1073741822, -5 >>> 2);

    //chars
    //a : 97
    var a = 'a';
    var temp = 'a' +1;

    assertTrue(97 >= a);
    assertTrue(97 <= a);
    assertTrue(97 == a);
    assertTrue(98 >= a);
    assertTrue(98 > a);
    assertTrue(90 < a);
    assertTrue(90 <= a);

    assertEquals(97 +1 , temp);
    assertEquals(97 +1 , a +1);
    assertEquals(97 +1 , a +1);
    assertEquals(97 +1 , 1+ a);
    assertEquals(1- 97 , 1- a);
    assertEquals(97 -1 , a -1);

    assertEquals(97/2 , a/2);
    assertEquals(97 * 2 , a * 2);
    assertEquals(97 >> 2 , a >> 2);
    assertEquals(97 % 2 , a % 2);
    
    //Compare Floating point numbers.
    assertTrue(0.1f == 0.1f);
    assertTrue(0.1F == 0.1D);
    assertTrue((0.0F) == 0);
    assertTrue(3.146 == 3.146F);

    assertTrue(0.1f >= 0.1D);
    assertTrue(0.1f <= 0.1D);
    
    assertFalse(0.1f > 0.1D);
    assertFalse(0.1f < 0.1D);

    //FIXME: unpass
    //assertTrue((0.1F+0D) == 0.1F);
    
    // ?:
    assertEquals(1, true?1:2);
    assertEquals(1, 1?:2);
    assertEquals(2, null?:2);

    
    assertEquals("11", 1 +"1");

    assertEquals("c1", "c" + '1');

}
{
    //Int Step test

    //asc
    var one = 1;
    var tree = 3; 
    var i = 1;
    for(num : i .. tree){
        assertEquals(i, num);
        i++;
    }
    assertEquals(i, 4);

    //desc
    i = 3;
    for(num : i .. one){
        assertEquals(i, num);
        i--;
    }
    assertEquals(i, 0);

}


%>